{"ast":null,"code":"/** A simple event emitter that can be used to listen to and emit events. */\nclass EventEmitter {\n  constructor() {\n    this.listeners = {};\n    /** Subscribe to an event. Returns an unsubscribe function. */\n    this.on = this.addEventListener;\n    /** Unsubscribe from an event */\n    this.un = this.removeEventListener;\n  }\n  /** Add an event listener */\n  addEventListener(event, listener, options) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = new Set();\n    }\n    this.listeners[event].add(listener);\n    if (options === null || options === void 0 ? void 0 : options.once) {\n      const unsubscribeOnce = () => {\n        this.removeEventListener(event, unsubscribeOnce);\n        this.removeEventListener(event, listener);\n      };\n      this.addEventListener(event, unsubscribeOnce);\n      return unsubscribeOnce;\n    }\n    return () => this.removeEventListener(event, listener);\n  }\n  removeEventListener(event, listener) {\n    var _a;\n    (_a = this.listeners[event]) === null || _a === void 0 ? void 0 : _a.delete(listener);\n  }\n  /** Subscribe to an event only once */\n  once(event, listener) {\n    return this.on(event, listener, {\n      once: true\n    });\n  }\n  /** Clear all events */\n  unAll() {\n    this.listeners = {};\n  }\n  /** Emit an event */\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (this.listeners[eventName]) {\n      this.listeners[eventName].forEach(listener => listener(...args));\n    }\n  }\n}\nexport default EventEmitter;","map":{"version":3,"names":["EventEmitter","constructor","listeners","on","addEventListener","un","removeEventListener","event","listener","options","Set","add","once","unsubscribeOnce","_a","delete","unAll","emit","eventName","_len","arguments","length","args","Array","_key","forEach"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/node_modules/wavesurfer.js/dist/event-emitter.js"],"sourcesContent":["/** A simple event emitter that can be used to listen to and emit events. */\nclass EventEmitter {\n    constructor() {\n        this.listeners = {};\n        /** Subscribe to an event. Returns an unsubscribe function. */\n        this.on = this.addEventListener;\n        /** Unsubscribe from an event */\n        this.un = this.removeEventListener;\n    }\n    /** Add an event listener */\n    addEventListener(event, listener, options) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = new Set();\n        }\n        this.listeners[event].add(listener);\n        if (options === null || options === void 0 ? void 0 : options.once) {\n            const unsubscribeOnce = () => {\n                this.removeEventListener(event, unsubscribeOnce);\n                this.removeEventListener(event, listener);\n            };\n            this.addEventListener(event, unsubscribeOnce);\n            return unsubscribeOnce;\n        }\n        return () => this.removeEventListener(event, listener);\n    }\n    removeEventListener(event, listener) {\n        var _a;\n        (_a = this.listeners[event]) === null || _a === void 0 ? void 0 : _a.delete(listener);\n    }\n    /** Subscribe to an event only once */\n    once(event, listener) {\n        return this.on(event, listener, { once: true });\n    }\n    /** Clear all events */\n    unAll() {\n        this.listeners = {};\n    }\n    /** Emit an event */\n    emit(eventName, ...args) {\n        if (this.listeners[eventName]) {\n            this.listeners[eventName].forEach((listener) => listener(...args));\n        }\n    }\n}\nexport default EventEmitter;\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,CAAC;EACfC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB;IACA,IAAI,CAACC,EAAE,GAAG,IAAI,CAACC,gBAAgB;IAC/B;IACA,IAAI,CAACC,EAAE,GAAG,IAAI,CAACC,mBAAmB;EACtC;EACA;EACAF,gBAAgBA,CAACG,KAAK,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACvC,IAAI,CAAC,IAAI,CAACP,SAAS,CAACK,KAAK,CAAC,EAAE;MACxB,IAAI,CAACL,SAAS,CAACK,KAAK,CAAC,GAAG,IAAIG,GAAG,CAAC,CAAC;IACrC;IACA,IAAI,CAACR,SAAS,CAACK,KAAK,CAAC,CAACI,GAAG,CAACH,QAAQ,CAAC;IACnC,IAAIC,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACG,IAAI,EAAE;MAChE,MAAMC,eAAe,GAAGA,CAAA,KAAM;QAC1B,IAAI,CAACP,mBAAmB,CAACC,KAAK,EAAEM,eAAe,CAAC;QAChD,IAAI,CAACP,mBAAmB,CAACC,KAAK,EAAEC,QAAQ,CAAC;MAC7C,CAAC;MACD,IAAI,CAACJ,gBAAgB,CAACG,KAAK,EAAEM,eAAe,CAAC;MAC7C,OAAOA,eAAe;IAC1B;IACA,OAAO,MAAM,IAAI,CAACP,mBAAmB,CAACC,KAAK,EAAEC,QAAQ,CAAC;EAC1D;EACAF,mBAAmBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACjC,IAAIM,EAAE;IACN,CAACA,EAAE,GAAG,IAAI,CAACZ,SAAS,CAACK,KAAK,CAAC,MAAM,IAAI,IAAIO,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,MAAM,CAACP,QAAQ,CAAC;EACzF;EACA;EACAI,IAAIA,CAACL,KAAK,EAAEC,QAAQ,EAAE;IAClB,OAAO,IAAI,CAACL,EAAE,CAACI,KAAK,EAAEC,QAAQ,EAAE;MAAEI,IAAI,EAAE;IAAK,CAAC,CAAC;EACnD;EACA;EACAI,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACd,SAAS,GAAG,CAAC,CAAC;EACvB;EACA;EACAe,IAAIA,CAACC,SAAS,EAAW;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IACnB,IAAI,IAAI,CAACtB,SAAS,CAACgB,SAAS,CAAC,EAAE;MAC3B,IAAI,CAAChB,SAAS,CAACgB,SAAS,CAAC,CAACO,OAAO,CAAEjB,QAAQ,IAAKA,QAAQ,CAAC,GAAGc,IAAI,CAAC,CAAC;IACtE;EACJ;AACJ;AACA,eAAetB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}