{"ast":null,"code":"// import MapComponent from \"../../component/performance/MapComponent\";\nimport KakaomapComponent from\"../../component/performance/KakaomapComponent\";import GlobalStyle from\"../../style/GlobalStyle\";import{MediaStyle,Container,SearchBanner,Box,Map,ConcertList}from\"../../style/performance/PerformanceStyle\";import PerformanceList from\"../../component/performance/PerformanceList\";import{useEffect,useState}from\"react\";import{useNavigate}from\"react-router-dom\";import MainAxios from\"../../axios/MainAxios\";import ModalComponent from\"../../utils/ModalComponent\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const Performance=()=>{const[inputValue,setInputValue]=useState(\"\");// 입력필드에 입력값을 저장\nconst[searchTerm,setSearchTerm]=useState(\"\");// 실제 검색을 수행할 검색어를 저장(검색버튼을 통해 검색할 데이터와 입력데이터를 분리)\nconst[performanceList,setPerformanceList]=useState([]);// AxiosApi로 가져온 공연데이터를 저장\nconst[filteredPerformanceList,setFilteredPerformanceList]=useState([]);// 필터링된 공연 데이터를 저장 .\nconst[selectedVenue,setSelectedVenue]=useState(null);// 선택된 공연장을 저장\nconst handleCardMouseOver=venue=>{setSelectedVenue(venue);};const navigate=useNavigate();useEffect(()=>{// 컴포넌트가 마운트될 때 공연 데이터를 불러옵니다.\nconst fetchPerformanceList=async()=>{try{const response=await MainAxios.notLoginPerformList();setPerformanceList(response.data);console.log(response.data);console.log(performanceList);}catch(error){console.error(\"Error fetching performance list\",error);}};fetchPerformanceList();},[]);// searchTerm 또는 performanceList 상태가 변경될 때마다 필터링된 데이터를 업데이트합니다.\nuseEffect(()=>{const filtered=performanceList.filter(performance=>performance.performanceName.includes(searchTerm)//   ||\n//   performance.performer.includes(searchTerm) // 공연명 또는 공연자명에 검색어가 포함되어 있을 경우 필터링\n).sort((a,b)=>new Date(b.performanceDate)-new Date(a.performanceDate));// 최신 날짜 순으로 정렬\nsetFilteredPerformanceList(filtered);console.log(filteredPerformanceList);},[searchTerm,performanceList]);// handleSearch 함수는 '공연 검색' 버튼을 클릭했을 때 호출됩니다.\n// inputValue가 있을 경우, inputValue를 searchTerm 상태로 설정하고, inputValue를 초기화합니다.\n// inputValue가 없을 경우, searchTerm 상태를 초기화합니다.\nconst handleSearch=()=>{if(inputValue){setSearchTerm(inputValue);setInputValue(\"\");}else{setSearchTerm(\"\");}};// handleInputChange 함수는 입력 필드의 값이 변경될 때마다 호출됩니다.\n// 이 함수는 입력 필드의 값을 inputValue 상태로 설정합니다.\nconst handleInputChange=event=>{setInputValue(event.target.value);};const handleRegister=()=>{navigate(\"/PerformanceUpdate\");console.log(\"공연 등록 버튼 클릭\");};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GlobalStyle,{}),/*#__PURE__*/_jsx(MediaStyle,{}),/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(SearchBanner,{children:[/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(\"div\",{children:\"\\uACF5\\uC5F0 \\uAC80\\uC0C9\"}),/*#__PURE__*/_jsx(ModalComponent,{open:\"\\uC5F4\\uAE30\",content:\"\\uD14C\\uC2A4\\uD2B8\",close:\"\\uB2EB\\uAE30\",openButtonStyle:{width:\"109rem\",bgColor:\"blue\"}})]}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputValue,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSearch,children:inputValue?\"공연 검색\":searchTerm?\"초기화\":\"공연 검색\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRegister,children:\"\\uACF5\\uC5F0 \\uB4F1\\uB85D\"})]})]}),/*#__PURE__*/_jsx(Map,{children:/*#__PURE__*/_jsx(KakaomapComponent,{performanceList:filteredPerformanceList,selectedVenue:selectedVenue})}),/*#__PURE__*/_jsx(\"div\",{className:\"title\",children:\"\\uB0B4 \\uADFC\\uCC98 \\uACF5\\uC5F0\"}),/*#__PURE__*/_jsx(PerformanceList,{performanceList:filteredPerformanceList,onCardMouseOver:handleCardMouseOver})]})]});};export default Performance;","map":{"version":3,"names":["KakaomapComponent","GlobalStyle","MediaStyle","Container","SearchBanner","Box","Map","ConcertList","PerformanceList","useEffect","useState","useNavigate","MainAxios","ModalComponent","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Performance","inputValue","setInputValue","searchTerm","setSearchTerm","performanceList","setPerformanceList","filteredPerformanceList","setFilteredPerformanceList","selectedVenue","setSelectedVenue","handleCardMouseOver","venue","navigate","fetchPerformanceList","response","notLoginPerformList","data","console","log","error","filtered","filter","performance","performanceName","includes","sort","a","b","Date","performanceDate","handleSearch","handleInputChange","event","target","value","handleRegister","children","open","content","close","openButtonStyle","width","bgColor","type","onChange","onClick","className","onCardMouseOver"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/pages/performance/Performance.jsx"],"sourcesContent":["// import MapComponent from \"../../component/performance/MapComponent\";\r\nimport KakaomapComponent from \"../../component/performance/KakaomapComponent\";\r\nimport GlobalStyle from \"../../style/GlobalStyle\";\r\nimport {\r\n  MediaStyle,\r\n  Container,\r\n  SearchBanner,\r\n  Box,\r\n  Map,\r\n  ConcertList,\r\n} from \"../../style/performance/PerformanceStyle\";\r\nimport PerformanceList from \"../../component/performance/PerformanceList\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MainAxios from \"../../axios/MainAxios\";\r\nimport ModalComponent from \"../../utils/ModalComponent\";\r\n\r\nconst Performance = () => {\r\n  const [inputValue, setInputValue] = useState(\"\"); // 입력필드에 입력값을 저장\r\n  const [searchTerm, setSearchTerm] = useState(\"\"); // 실제 검색을 수행할 검색어를 저장(검색버튼을 통해 검색할 데이터와 입력데이터를 분리)\r\n  const [performanceList, setPerformanceList] = useState([]); // AxiosApi로 가져온 공연데이터를 저장\r\n  const [filteredPerformanceList, setFilteredPerformanceList] = useState([]); // 필터링된 공연 데이터를 저장 .\r\n  const [selectedVenue, setSelectedVenue] = useState(null); // 선택된 공연장을 저장\r\n\r\n  const handleCardMouseOver = (venue) => {\r\n    setSelectedVenue(venue);\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 컴포넌트가 마운트될 때 공연 데이터를 불러옵니다.\r\n    const fetchPerformanceList = async () => {\r\n      try {\r\n        const response = await MainAxios.notLoginPerformList();\r\n        setPerformanceList(response.data);\r\n        console.log(response.data);\r\n        console.log(performanceList);\r\n      } catch (error) {\r\n        console.error(\"Error fetching performance list\", error);\r\n      }\r\n    };\r\n    fetchPerformanceList();\r\n  }, []);\r\n\r\n  // searchTerm 또는 performanceList 상태가 변경될 때마다 필터링된 데이터를 업데이트합니다.\r\n  useEffect(() => {\r\n    const filtered = performanceList\r\n      .filter(\r\n        (performance) => performance.performanceName.includes(searchTerm)\r\n        //   ||\r\n        //   performance.performer.includes(searchTerm) // 공연명 또는 공연자명에 검색어가 포함되어 있을 경우 필터링\r\n      )\r\n      .sort(\r\n        (a, b) => new Date(b.performanceDate) - new Date(a.performanceDate)\r\n      ); // 최신 날짜 순으로 정렬\r\n    setFilteredPerformanceList(filtered);\r\n    console.log(filteredPerformanceList);\r\n  }, [searchTerm, performanceList]);\r\n\r\n  // handleSearch 함수는 '공연 검색' 버튼을 클릭했을 때 호출됩니다.\r\n  // inputValue가 있을 경우, inputValue를 searchTerm 상태로 설정하고, inputValue를 초기화합니다.\r\n  // inputValue가 없을 경우, searchTerm 상태를 초기화합니다.\r\n  const handleSearch = () => {\r\n    if (inputValue) {\r\n      setSearchTerm(inputValue);\r\n      setInputValue(\"\");\r\n    } else {\r\n      setSearchTerm(\"\");\r\n    }\r\n  };\r\n\r\n  // handleInputChange 함수는 입력 필드의 값이 변경될 때마다 호출됩니다.\r\n  // 이 함수는 입력 필드의 값을 inputValue 상태로 설정합니다.\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleRegister = () => {\r\n    navigate(\"/PerformanceUpdate\");\r\n    console.log(\"공연 등록 버튼 클릭\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <MediaStyle />\r\n      <Container>\r\n        <SearchBanner>\r\n          <Box>\r\n            <div>공연 검색</div>\r\n            <ModalComponent\r\n              open=\"열기\"\r\n              content=\"테스트\"\r\n              close=\"닫기\"\r\n              openButtonStyle={{ width: \"109rem\", bgColor: \"blue\" }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <input\r\n              type=\"text\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n            />\r\n            <button onClick={handleSearch}>\r\n              {inputValue ? \"공연 검색\" : searchTerm ? \"초기화\" : \"공연 검색\"}\r\n            </button>\r\n            <button onClick={handleRegister}>공연 등록</button>\r\n          </Box>\r\n        </SearchBanner>\r\n        <Map>\r\n          <KakaomapComponent\r\n            performanceList={filteredPerformanceList}\r\n            selectedVenue={selectedVenue}\r\n          />\r\n        </Map>\r\n        <div className=\"title\">내 근처 공연</div>\r\n        <PerformanceList\r\n          performanceList={filteredPerformanceList}\r\n          onCardMouseOver={handleCardMouseOver}\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Performance;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}