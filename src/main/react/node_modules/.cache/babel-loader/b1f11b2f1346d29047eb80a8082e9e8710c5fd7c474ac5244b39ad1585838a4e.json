{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{PostTitle,PostContent,PostDate,CommentContainer,CommentForm,CommentButton,PostContainer,PostHeader,PostAuthor,PostViews,PostVotes,PostUpvote,PostDownvote,CommentHeader,CommentContent,PostBody,Dropdown,WriterInfo,TitleContainer,InformationContainer,SmallInput,LargeInput,FormContainer,PostNickName,CommentBox,ButtonText}from\"../../style/PostRoomStyle\";import CommunityAxiosApi from\"../../axios/CommunityAxios\";import{useNavigate,useParams}from\"react-router-dom\";import Common from\"../../utils/Common\";import CommunityRankComponent from\"./CommunityRankComponent\";import useWebSocket from\"../../context/useWebsocket\";import{HeadText}from\"../../style/CommunityPostStyle\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const Post=()=>{const[comments,setComments]=useState([]);const[post,setPost]=useState({});const[currentCommentPage,setCurrentCommentPage]=useState(0);const[totalCommentPages,setTotalCommentPages]=useState(0);const[sortType,setSortType]=useState(\"\");const[newComment,setNewComment]=useState(\"\");const[newReply,setNewReply]=useState(\"\");const[email,setEmail]=useState(\"asd123@naver.com\");const[nickName,setNickName]=useState(\"\");const[password,setPassword]=useState(\"\");const[replyNickName,setReplyNickName]=useState({});const[replyPassword,setReplyPassword]=useState({});const[replyOpen,setReplyOpen]=useState({});const[totalComment,setTotalComment]=useState(0);const{id}=useParams();const navigate=useNavigate();const{sendMessage}=useWebSocket(Common.SOCKET_URL,email);const getPartialIp=ipAddress=>{if(!ipAddress)return\"\";const segments=ipAddress.split(\".\");return\"\".concat(segments[0],\".\").concat(segments[1]);};const ipAddress=getPartialIp(post.ipAddress);useEffect(()=>{const postDetail=async()=>{try{const response=await CommunityAxiosApi.getCommunityDetail(id);setPost(response.data);const commentResponse=await CommunityAxiosApi.getCommentList(id,sortType,currentCommentPage);console.log(commentResponse.data);setComments(commentResponse.data.content);setTotalCommentPages(commentResponse.data.totalPages);// 전체 댓글 수 조회\nconst totalCommentsResponse=await CommunityAxiosApi.getTotalComments(id);setTotalComment(totalCommentsResponse.data);}catch(error){console.error(error);}};postDetail();},[id,currentCommentPage,sortType]);const sendCommentMessage=(postId,commentId,commentContent,commenterEmail,authorEmail)=>{const commentMessage={type:\"COMMENT\",postId:postId,commentId:commentId,commentContent:commentContent,commenterEmail:commenterEmail,authorEmail:authorEmail};sendMessage(commentMessage);};const commentWrite=async()=>{try{const response=await CommunityAxiosApi.commentWrite(email,nickName,password,id,newComment,null);setComments([...comments,response.data]);setNewComment(\"\");sendCommentMessage(id,response.data.id,newComment,email?email:post.ipAddress,post.email?post.email:post.ipAddress);// 댓글 작성 후 댓글 목록 다시 불러오기\nconst commentResponse=await CommunityAxiosApi.getCommentList(id,sortType,currentCommentPage);setComments(commentResponse.data.content);}catch(error){console.error(error);}};// 대댓글 작성 함수\nconst replyWrite=async parentCommentId=>{try{const replyAuthorName=replyNickName[parentCommentId];const replyAuthorPassword=replyPassword[parentCommentId];const response=await CommunityAxiosApi.replyWrite(email,replyAuthorName,replyAuthorPassword,id,newReply,parentCommentId);sendCommentMessage(id,response.data.id,newReply,email?email:post.ipAddress,post.email?post.email:post.ipAddress);// 댓글 목록 다시 불러오기\nconst commentResponse=await CommunityAxiosApi.getCommentList(id,sortType,currentCommentPage);setComments(commentResponse.data.content);setNewReply(\"\");setTotalCommentPages(commentResponse.data.totalPages);}catch(error){console.error(error);}};const vote=async isUpvote=>{try{await CommunityAxiosApi.vote(id,isUpvote);const response=await CommunityAxiosApi.getCommunityDetail(id);setPost(response.data);if(isUpvote){alert(\"추천이 완료되었습니다.\");}else{alert(\"비추천이 완료되었습니다.\");}}catch(error){console.log(error.response);if(error.response&&error.response.status===400){alert(error.response.data);}else{alert(\"오류가 발생하였습니다.\");}}};// 부모 댓글에만 대댓글을 작성할수 있다.\nconst toggleReplyForm=(commentId,parentCommentId)=>{if(parentCommentId===null){// 이미 열려있는 댓글 창이면 닫고, 닫혀있는 댓글 창이면 열기\nsetReplyOpen(prev=>({...prev,[commentId]:!prev[commentId]}));if(replyOpen[commentId]){// 해당 댓글 창이 이미 열려있는 경우, 상태 업데이트하여 해당 창의 내용 초기화\nsetNewReply(prev=>({...prev,[commentId]:\"\"}));}}};// 답글 작성자 정보를 변경하는 함수\nconst handleReplyAuthorChange=(commentId,name,pass)=>{// 댓글 ID에 해당하는 답글 작성자의 닉네임 업데이트\nsetReplyNickName(prev=>({...prev,[commentId]:name}));// 댓글 ID에 해당하는 답글 작성자의 비밀번호 업데이트\nsetReplyPassword(prev=>({...prev,[commentId]:pass}));};// 닉네임을 클릭했을 때 이메일 확인 후 이동하는 함수\nconst nicknameClick=comment=>{if(comment.email!==null){// 이메일이 있는 경우에만 이동\nnavigate(\"/otherpage/\".concat(comment.email));}else{alert(\"해당 사용자의 이메일이 없습니다.\");}};return/*#__PURE__*/_jsxs(PostContainer,{children:[/*#__PURE__*/_jsx(CommunityRankComponent,{categoryName:post.categoryName}),/*#__PURE__*/_jsx(PostHeader,{children:/*#__PURE__*/_jsxs(WriterInfo,{children:[/*#__PURE__*/_jsxs(TitleContainer,{children:[/*#__PURE__*/_jsx(PostTitle,{children:post.title}),/*#__PURE__*/_jsxs(PostViews,{children:[\"\\uC870\\uD68C\\uC218: \",post.viewCount]})]}),/*#__PURE__*/_jsxs(PostAuthor,{children:[/*#__PURE__*/_jsx(PostNickName,{children:post.email?post.email:\"\".concat(post.nickName,\"(\").concat(ipAddress,\")\")}),/*#__PURE__*/_jsxs(PostDate,{children:[\" \",Common.formatDate(post.regDate)]})]})]})}),/*#__PURE__*/_jsx(PostBody,{children:/*#__PURE__*/_jsx(PostContent,{dangerouslySetInnerHTML:{__html:post.content}})}),/*#__PURE__*/_jsxs(PostVotes,{children:[/*#__PURE__*/_jsx(PostUpvote,{onClick:()=>vote(true),children:/*#__PURE__*/_jsx(ButtonText,{children:\"\\uCD94\\uCC9C\"})}),/*#__PURE__*/_jsx(PostTitle,{children:post.voteCount}),/*#__PURE__*/_jsx(PostDownvote,{onClick:()=>vote(false),children:\"\\uBE44\\uCD94\\uCC9C\"})]}),/*#__PURE__*/_jsxs(CommentHeader,{children:[\"\\uC804\\uCCB4 \\uB313\\uAE00 \\uC218: \",totalComment,/*#__PURE__*/_jsx(Dropdown,{onChange:selected=>setSortType(selected.target.value),children:[\"최신순\",\"등록순\",\"답글순\"].map((option,index)=>/*#__PURE__*/_jsx(\"option\",{value:option,children:option},index))})]}),/*#__PURE__*/_jsxs(CommentContainer,{children:[comments.filter(comment=>comment.parentCommentId===null).map(comment=>/*#__PURE__*/_jsxs(CommentBox,{children:[/*#__PURE__*/_jsxs(CommentContent,{children:[/*#__PURE__*/_jsx(\"a\",{href:\"#\",onClick:e=>{e.preventDefault();nicknameClick(comment);},children:comment.email?comment.nickName:\"\".concat(comment.nickName,\"(\").concat(getPartialIp(comment.ipAddress),\")\")}),/*#__PURE__*/_jsx(_Fragment,{children:Common.formatDate(comment.regDate)}),/*#__PURE__*/_jsx(HeadText,{onClick:()=>toggleReplyForm(comment.commentId,comment.parentCommentId),children:comment.content}),replyOpen[comment.commentId]&&/*#__PURE__*/_jsxs(FormContainer,{children:[!email&&/*#__PURE__*/_jsx(InformationContainer,{children:/*#__PURE__*/_jsxs(FormContainer,{children:[/*#__PURE__*/_jsx(SmallInput,{type:\"text\",value:replyNickName[comment.commentId]||\"\",onChange:e=>handleReplyAuthorChange(comment.commentId,e.target.value,replyPassword[comment.commentId]),placeholder:\"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"}),/*#__PURE__*/_jsx(SmallInput,{type:\"password\",value:replyPassword[comment.commentId]||\"\",onChange:e=>handleReplyAuthorChange(comment.commentId,replyNickName[comment.commentId],e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\"})]})}),/*#__PURE__*/_jsx(LargeInput,{type:\"text\",value:newReply[comment.commentId]||\"\",onChange:e=>setNewReply({...newReply,[comment.commentId]:e.target.value})}),/*#__PURE__*/_jsx(CommentButton,{type:\"button\",onClick:()=>replyWrite(comment.commentId),required:nickName&&password,children:\"\\uB313\\uAE00 \\uC791\\uC131\"})]})]}),comment.childComments&&comment.childComments.map(childComment=>/*#__PURE__*/_jsxs(CommentContent,{style:{marginLeft:\"20px\"},children:[/*#__PURE__*/_jsx(\"a\",{href:\"#\",onClick:e=>{e.preventDefault();nicknameClick(comment);},children:comment.email?comment.nickName:\"\".concat(comment.nickName,\"(\").concat(getPartialIp(comment.ipAddress),\")\")}),/*#__PURE__*/_jsx(_Fragment,{children:Common.formatDate(childComment.regDate)}),/*#__PURE__*/_jsx(HeadText,{onClick:()=>toggleReplyForm(childComment.commentId,childComment.parentCommentId),children:childComment.content})]}))]},comment.commentId)),currentCommentPage>0&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>setCurrentCommentPage(currentCommentPage-1),children:\"\\uC774\\uC804\"}),currentCommentPage+1<totalCommentPages&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>setCurrentCommentPage(currentCommentPage+1),children:\"\\uB2E4\\uC74C\"}),/*#__PURE__*/_jsx(CommentForm,{children:/*#__PURE__*/_jsxs(FormContainer,{children:[!email&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(InformationContainer,{children:/*#__PURE__*/_jsxs(FormContainer,{children:[/*#__PURE__*/_jsx(SmallInput,{type:\"text\",value:nickName,onChange:e=>setNickName(e.target.value),placeholder:\"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"}),/*#__PURE__*/_jsx(SmallInput,{type:\"password\",value:password,onChange:e=>setPassword(e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\"})]})})}),/*#__PURE__*/_jsx(LargeInput,{type:\"text\",value:newComment,onChange:e=>setNewComment(e.target.value)}),/*#__PURE__*/_jsx(CommentButton,{type:\"button\",onClick:commentWrite,required:nickName&&password,children:\"\\uB313\\uAE00 \\uC791\\uC131\"})]})})]})]});};export default Post;","map":{"version":3,"names":["React","useEffect","useState","PostTitle","PostContent","PostDate","CommentContainer","CommentForm","CommentButton","PostContainer","PostHeader","PostAuthor","PostViews","PostVotes","PostUpvote","PostDownvote","CommentHeader","CommentContent","PostBody","Dropdown","WriterInfo","TitleContainer","InformationContainer","SmallInput","LargeInput","FormContainer","PostNickName","CommentBox","ButtonText","CommunityAxiosApi","useNavigate","useParams","Common","CommunityRankComponent","useWebSocket","HeadText","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Post","comments","setComments","post","setPost","currentCommentPage","setCurrentCommentPage","totalCommentPages","setTotalCommentPages","sortType","setSortType","newComment","setNewComment","newReply","setNewReply","email","setEmail","nickName","setNickName","password","setPassword","replyNickName","setReplyNickName","replyPassword","setReplyPassword","replyOpen","setReplyOpen","totalComment","setTotalComment","id","navigate","sendMessage","SOCKET_URL","getPartialIp","ipAddress","segments","split","concat","postDetail","response","getCommunityDetail","data","commentResponse","getCommentList","console","log","content","totalPages","totalCommentsResponse","getTotalComments","error","sendCommentMessage","postId","commentId","commentContent","commenterEmail","authorEmail","commentMessage","type","commentWrite","replyWrite","parentCommentId","replyAuthorName","replyAuthorPassword","vote","isUpvote","alert","status","toggleReplyForm","prev","handleReplyAuthorChange","name","pass","nicknameClick","comment","children","categoryName","title","viewCount","formatDate","regDate","dangerouslySetInnerHTML","__html","onClick","voteCount","onChange","selected","target","value","map","option","index","filter","href","e","preventDefault","placeholder","required","childComments","childComment","style","marginLeft"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/component/community/PostRoomComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PostTitle,\r\n  PostContent,\r\n  PostDate,\r\n  CommentContainer,\r\n  CommentForm,\r\n  CommentButton,\r\n  PostContainer,\r\n  PostHeader,\r\n  PostAuthor,\r\n  PostViews,\r\n  PostVotes,\r\n  PostUpvote,\r\n  PostDownvote,\r\n  CommentHeader,\r\n  CommentContent,\r\n  PostBody,\r\n  Dropdown,\r\n  WriterInfo,\r\n  TitleContainer,\r\n  InformationContainer,\r\n  SmallInput,\r\n  LargeInput,\r\n  FormContainer,\r\n  PostNickName,\r\n  CommentBox,\r\n  ButtonText,\r\n} from \"../../style/PostRoomStyle\";\r\nimport CommunityAxiosApi from \"../../axios/CommunityAxios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Common from \"../../utils/Common\";\r\nimport CommunityRankComponent from \"./CommunityRankComponent\";\r\nimport useWebSocket from \"../../context/useWebsocket\";\r\nimport { HeadText } from \"../../style/CommunityPostStyle\";\r\n\r\nconst Post = () => {\r\n  const [comments, setComments] = useState([]);\r\n  const [post, setPost] = useState({});\r\n  const [currentCommentPage, setCurrentCommentPage] = useState(0);\r\n  const [totalCommentPages, setTotalCommentPages] = useState(0);\r\n  const [sortType, setSortType] = useState(\"\");\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newReply, setNewReply] = useState(\"\");\r\n  const [email, setEmail] = useState(\"asd123@naver.com\");\r\n  const [nickName, setNickName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [replyNickName, setReplyNickName] = useState({});\r\n  const [replyPassword, setReplyPassword] = useState({});\r\n  const [replyOpen, setReplyOpen] = useState({});\r\n  const [totalComment, setTotalComment] = useState(0);\r\n\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const { sendMessage } = useWebSocket(Common.SOCKET_URL, email);\r\n\r\n  const getPartialIp = (ipAddress) => {\r\n    if (!ipAddress) return \"\";\r\n    const segments = ipAddress.split(\".\");\r\n    return `${segments[0]}.${segments[1]}`;\r\n  };\r\n  const ipAddress = getPartialIp(post.ipAddress);\r\n\r\n  useEffect(() => {\r\n    const postDetail = async () => {\r\n      try {\r\n        const response = await CommunityAxiosApi.getCommunityDetail(id);\r\n        setPost(response.data);\r\n        const commentResponse = await CommunityAxiosApi.getCommentList(\r\n          id,\r\n          sortType,\r\n          currentCommentPage\r\n        );\r\n        console.log(commentResponse.data);\r\n        setComments(commentResponse.data.content);\r\n        setTotalCommentPages(commentResponse.data.totalPages);\r\n        // 전체 댓글 수 조회\r\n        const totalCommentsResponse = await CommunityAxiosApi.getTotalComments(\r\n          id\r\n        );\r\n        setTotalComment(totalCommentsResponse.data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    postDetail();\r\n  }, [id, currentCommentPage, sortType]);\r\n  const sendCommentMessage = (\r\n    postId,\r\n    commentId,\r\n    commentContent,\r\n    commenterEmail,\r\n    authorEmail\r\n  ) => {\r\n    const commentMessage = {\r\n      type: \"COMMENT\",\r\n      postId: postId,\r\n      commentId: commentId,\r\n      commentContent: commentContent,\r\n      commenterEmail: commenterEmail,\r\n      authorEmail: authorEmail,\r\n    };\r\n    sendMessage(commentMessage);\r\n  };\r\n  const commentWrite = async () => {\r\n    try {\r\n      const response = await CommunityAxiosApi.commentWrite(\r\n        email,\r\n        nickName,\r\n        password,\r\n        id,\r\n        newComment,\r\n        null\r\n      );\r\n      setComments([...comments, response.data]);\r\n      setNewComment(\"\");\r\n      sendCommentMessage(\r\n        id,\r\n        response.data.id,\r\n        newComment,\r\n        email ? email : post.ipAddress,\r\n        post.email ? post.email : post.ipAddress\r\n      );\r\n      // 댓글 작성 후 댓글 목록 다시 불러오기\r\n      const commentResponse = await CommunityAxiosApi.getCommentList(\r\n        id,\r\n        sortType,\r\n        currentCommentPage\r\n      );\r\n      setComments(commentResponse.data.content);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  // 대댓글 작성 함수\r\n  const replyWrite = async (parentCommentId) => {\r\n    try {\r\n      const replyAuthorName = replyNickName[parentCommentId];\r\n      const replyAuthorPassword = replyPassword[parentCommentId];\r\n\r\n      const response = await CommunityAxiosApi.replyWrite(\r\n        email,\r\n        replyAuthorName,\r\n        replyAuthorPassword,\r\n        id,\r\n        newReply,\r\n        parentCommentId\r\n      );\r\n      sendCommentMessage(\r\n        id,\r\n        response.data.id,\r\n        newReply,\r\n        email ? email : post.ipAddress,\r\n        post.email ? post.email : post.ipAddress\r\n      );\r\n      // 댓글 목록 다시 불러오기\r\n      const commentResponse = await CommunityAxiosApi.getCommentList(\r\n        id,\r\n        sortType,\r\n        currentCommentPage\r\n      );\r\n      setComments(commentResponse.data.content);\r\n      setNewReply(\"\");\r\n      setTotalCommentPages(commentResponse.data.totalPages);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  const vote = async (isUpvote) => {\r\n    try {\r\n      await CommunityAxiosApi.vote(id, isUpvote);\r\n      const response = await CommunityAxiosApi.getCommunityDetail(id);\r\n      setPost(response.data);\r\n      if (isUpvote) {\r\n        alert(\"추천이 완료되었습니다.\");\r\n      } else {\r\n        alert(\"비추천이 완료되었습니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      if (error.response && error.response.status === 400) {\r\n        alert(error.response.data);\r\n      } else {\r\n        alert(\"오류가 발생하였습니다.\");\r\n      }\r\n    }\r\n  };\r\n  // 부모 댓글에만 대댓글을 작성할수 있다.\r\n  const toggleReplyForm = (commentId, parentCommentId) => {\r\n    if (parentCommentId === null) {\r\n      // 이미 열려있는 댓글 창이면 닫고, 닫혀있는 댓글 창이면 열기\r\n      setReplyOpen((prev) => ({ ...prev, [commentId]: !prev[commentId] }));\r\n      if (replyOpen[commentId]) {\r\n        // 해당 댓글 창이 이미 열려있는 경우, 상태 업데이트하여 해당 창의 내용 초기화\r\n        setNewReply((prev) => ({ ...prev, [commentId]: \"\" }));\r\n      }\r\n    }\r\n  };\r\n  // 답글 작성자 정보를 변경하는 함수\r\n  const handleReplyAuthorChange = (commentId, name, pass) => {\r\n    // 댓글 ID에 해당하는 답글 작성자의 닉네임 업데이트\r\n    setReplyNickName((prev) => ({ ...prev, [commentId]: name }));\r\n    // 댓글 ID에 해당하는 답글 작성자의 비밀번호 업데이트\r\n    setReplyPassword((prev) => ({ ...prev, [commentId]: pass }));\r\n  };\r\n  // 닉네임을 클릭했을 때 이메일 확인 후 이동하는 함수\r\n  const nicknameClick = (comment) => {\r\n    if (comment.email !== null) {\r\n      // 이메일이 있는 경우에만 이동\r\n      navigate(`/otherpage/${comment.email}`);\r\n    } else {\r\n      alert(\"해당 사용자의 이메일이 없습니다.\");\r\n    }\r\n  };\r\n  return (\r\n    <PostContainer>\r\n      <CommunityRankComponent categoryName={post.categoryName} />\r\n      <PostHeader>\r\n        <WriterInfo>\r\n          <TitleContainer>\r\n            <PostTitle>{post.title}</PostTitle>\r\n            <PostViews>조회수: {post.viewCount}</PostViews>\r\n          </TitleContainer>\r\n          <PostAuthor>\r\n            <PostNickName>\r\n              {post.email ? post.email : `${post.nickName}(${ipAddress})`}\r\n            </PostNickName>\r\n            <PostDate> {Common.formatDate(post.regDate)}</PostDate>\r\n          </PostAuthor>\r\n        </WriterInfo>\r\n      </PostHeader>\r\n      <PostBody>\r\n        <PostContent dangerouslySetInnerHTML={{ __html: post.content }} />\r\n      </PostBody>\r\n      <PostVotes>\r\n        <PostUpvote onClick={() => vote(true)}>\r\n          <ButtonText>추천</ButtonText>\r\n        </PostUpvote>\r\n        <PostTitle>{post.voteCount}</PostTitle>\r\n        <PostDownvote onClick={() => vote(false)}>비추천</PostDownvote>\r\n      </PostVotes>\r\n      <CommentHeader>\r\n        전체 댓글 수: {totalComment}\r\n        <Dropdown onChange={(selected) => setSortType(selected.target.value)}>\r\n          {[\"최신순\", \"등록순\", \"답글순\"].map((option, index) => (\r\n            <option key={index} value={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </Dropdown>\r\n      </CommentHeader>\r\n\r\n      <CommentContainer>\r\n        {comments\r\n          .filter((comment) => comment.parentCommentId === null)\r\n          .map((comment) => (\r\n            <CommentBox key={comment.commentId}>\r\n              <CommentContent>\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    nicknameClick(comment);\r\n                  }}\r\n                >\r\n                  {comment.email\r\n                    ? comment.nickName\r\n                    : `${comment.nickName}(${getPartialIp(comment.ipAddress)})`}\r\n                </a>\r\n\r\n                <>{Common.formatDate(comment.regDate)}</>\r\n                <HeadText\r\n                  onClick={() =>\r\n                    toggleReplyForm(comment.commentId, comment.parentCommentId)\r\n                  }\r\n                >\r\n                  {comment.content}\r\n                </HeadText>\r\n                {replyOpen[comment.commentId] && (\r\n                  <FormContainer>\r\n                    {!email && (\r\n                      <InformationContainer>\r\n                        <FormContainer>\r\n                          <SmallInput\r\n                            type=\"text\"\r\n                            value={replyNickName[comment.commentId] || \"\"}\r\n                            onChange={(e) =>\r\n                              handleReplyAuthorChange(\r\n                                comment.commentId,\r\n                                e.target.value,\r\n                                replyPassword[comment.commentId]\r\n                              )\r\n                            }\r\n                            placeholder=\"닉네임을 입력하세요\"\r\n                          />\r\n                          <SmallInput\r\n                            type=\"password\"\r\n                            value={replyPassword[comment.commentId] || \"\"}\r\n                            onChange={(e) =>\r\n                              handleReplyAuthorChange(\r\n                                comment.commentId,\r\n                                replyNickName[comment.commentId],\r\n                                e.target.value\r\n                              )\r\n                            }\r\n                            placeholder=\"비밀번호를 입력하세요\"\r\n                          />\r\n                        </FormContainer>\r\n                      </InformationContainer>\r\n                    )}\r\n                    <LargeInput\r\n                      type=\"text\"\r\n                      value={newReply[comment.commentId] || \"\"}\r\n                      onChange={(e) =>\r\n                        setNewReply({\r\n                          ...newReply,\r\n                          [comment.commentId]: e.target.value,\r\n                        })\r\n                      }\r\n                    />\r\n                    <CommentButton\r\n                      type=\"button\"\r\n                      onClick={() => replyWrite(comment.commentId)}\r\n                      required={nickName && password}\r\n                    >\r\n                      댓글 작성\r\n                    </CommentButton>\r\n                  </FormContainer>\r\n                )}\r\n              </CommentContent>\r\n              {comment.childComments &&\r\n                comment.childComments.map((childComment) => (\r\n                  <CommentContent style={{ marginLeft: \"20px\" }}>\r\n                    <a\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        nicknameClick(comment);\r\n                      }}\r\n                    >\r\n                      {comment.email\r\n                        ? comment.nickName\r\n                        : `${comment.nickName}(${getPartialIp(\r\n                            comment.ipAddress\r\n                          )})`}\r\n                    </a>\r\n                    <>{Common.formatDate(childComment.regDate)}</>\r\n                    <HeadText\r\n                      onClick={() =>\r\n                        toggleReplyForm(\r\n                          childComment.commentId,\r\n                          childComment.parentCommentId\r\n                        )\r\n                      }\r\n                    >\r\n                      {childComment.content}\r\n                    </HeadText>\r\n                  </CommentContent>\r\n                ))}\r\n            </CommentBox>\r\n          ))}\r\n        {currentCommentPage > 0 && (\r\n          <button onClick={() => setCurrentCommentPage(currentCommentPage - 1)}>\r\n            이전\r\n          </button>\r\n        )}\r\n        {currentCommentPage + 1 < totalCommentPages && (\r\n          <button onClick={() => setCurrentCommentPage(currentCommentPage + 1)}>\r\n            다음\r\n          </button>\r\n        )}\r\n        <CommentForm>\r\n          <FormContainer>\r\n            {!email && (\r\n              <>\r\n                <InformationContainer>\r\n                  <FormContainer>\r\n                    <SmallInput\r\n                      type=\"text\"\r\n                      value={nickName}\r\n                      onChange={(e) => setNickName(e.target.value)}\r\n                      placeholder=\"닉네임을 입력하세요\"\r\n                    />\r\n                    <SmallInput\r\n                      type=\"password\"\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      placeholder=\"비밀번호를 입력하세요\"\r\n                    />\r\n                  </FormContainer>\r\n                </InformationContainer>\r\n              </>\r\n            )}\r\n            <LargeInput\r\n              type=\"text\"\r\n              value={newComment}\r\n              onChange={(e) => setNewComment(e.target.value)}\r\n            />\r\n            <CommentButton\r\n              type=\"button\"\r\n              onClick={commentWrite}\r\n              required={nickName && password}\r\n            >\r\n              댓글 작성\r\n            </CommentButton>\r\n          </FormContainer>\r\n        </CommentForm>\r\n      </CommentContainer>\r\n    </PostContainer>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}