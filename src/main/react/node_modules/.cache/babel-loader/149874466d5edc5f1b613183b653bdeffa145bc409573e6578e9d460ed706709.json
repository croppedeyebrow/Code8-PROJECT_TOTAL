{"ast":null,"code":"import AxiosApi from\"../../axios/PerformanceAxios\";import React,{useEffect,useState}from\"react\";import{useNavigate}from\"react-router-dom\";import{Container,UserInfo,UpdateZone,InputBox,Button}from\"../../style/performance/PerformanceUpdateStyle\";import UpdateBox from\"../../component/performance/UpdateBox\";import UpdateUserInfo from\"../../component/performance/UpdateUserInfo\";import ModalComponent from\"../../utils/ModalComponent\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const PerformanceUpdate=()=>{// // 입력값 정보 저장\n// const [ performer, setPerformer ] = useState([]); // 참여자\n// const [ venue, setVenue ] = useState(\"\"); // 공연장소\n// const [ detailVenue, setDetailVenue ] = useState(\"\"); // 상세공연장소\n// const [ date, setDate ] = useState(\"\"); // 공연일시\n// const [ title, setTitle ] = useState(\"\"); // 공연제목\n// const [ poster, setPoster ] = useState(\"\"); // 포스터\n// const [ seat, setSeat ] = useState(\"\"); // 좌석수\n// const [ description, setDescription ] = useState(\"\"); // 공연소개\n// // 유효성 검사, 포스터이미지, 설명은 없어도 되는 값이므로 제외\n// const [ isperformer, setIsPerformer ] = useState(false); // 참여자 입력유무\n// const [ isvenue, setIsVenue ] = useState(false); // 공연장소 입력유무\n// const [ isdetailVenue, setIsDetailVenue ] = useState(false); // 상세공연장소 입력유무\n// const [ isdate, setIsDate ] = useState(false); // 공연일시 입력유무\n// const [ istitle, setIsTitle ] = useState(false); // 공연제목 입력유무\n// const [ isseat, setIsSeat ] = useState(false); // 좌석수 입력유무\nconst[userList,setUserList]=useState([]);// AxiosApi로 가져온 유저정보를 저장\nconst navigate=useNavigate();const email=window.localStorage.getItem(\"email\");console.log(email);useEffect(()=>{if(!email){alert(\"로그인이 필요합니다.\");navigate(\"/login\");}},[]);useEffect(()=>{// 컴포넌트가 마운트될 때 모든 회원정보를 불러옵니다.\nconst fetchUserList=async()=>{try{const response=await AxiosApi.getUserList();setUserList(response.data);}catch(error){console.error('Error fetching performance list',error);}};fetchUserList();},[]);useEffect(()=>{console.log(userList);},[userList]);// userList가 변경될 때마다 로그를 출력합니다.\n// 입력값을 서버로 전송할 부분\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(UpdateUserInfo,{userList:userList}),/*#__PURE__*/_jsx(UpdateBox,{userList:userList})]})});};export default PerformanceUpdate;","map":{"version":3,"names":["AxiosApi","React","useEffect","useState","useNavigate","Container","UserInfo","UpdateZone","InputBox","Button","UpdateBox","UpdateUserInfo","ModalComponent","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PerformanceUpdate","userList","setUserList","navigate","email","window","localStorage","getItem","console","log","alert","fetchUserList","response","getUserList","data","error","children"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/pages/performance/PerformanceUpdate.jsx"],"sourcesContent":["import AxiosApi from \"../../axios/PerformanceAxios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Container, UserInfo, UpdateZone, InputBox, Button } from \"../../style/performance/PerformanceUpdateStyle\";\r\nimport UpdateBox from \"../../component/performance/UpdateBox\";\r\nimport UpdateUserInfo from \"../../component/performance/UpdateUserInfo\";\r\nimport ModalComponent from \"../../utils/ModalComponent\";\r\n\r\n\r\n\r\nconst PerformanceUpdate = () => {\r\n\r\n  // // 입력값 정보 저장\r\n  // const [ performer, setPerformer ] = useState([]); // 참여자\r\n  // const [ venue, setVenue ] = useState(\"\"); // 공연장소\r\n  // const [ detailVenue, setDetailVenue ] = useState(\"\"); // 상세공연장소\r\n  // const [ date, setDate ] = useState(\"\"); // 공연일시\r\n  // const [ title, setTitle ] = useState(\"\"); // 공연제목\r\n  // const [ poster, setPoster ] = useState(\"\"); // 포스터\r\n  // const [ seat, setSeat ] = useState(\"\"); // 좌석수\r\n  // const [ description, setDescription ] = useState(\"\"); // 공연소개\r\n\r\n  // // 유효성 검사, 포스터이미지, 설명은 없어도 되는 값이므로 제외\r\n  // const [ isperformer, setIsPerformer ] = useState(false); // 참여자 입력유무\r\n  // const [ isvenue, setIsVenue ] = useState(false); // 공연장소 입력유무\r\n  // const [ isdetailVenue, setIsDetailVenue ] = useState(false); // 상세공연장소 입력유무\r\n  // const [ isdate, setIsDate ] = useState(false); // 공연일시 입력유무\r\n  // const [ istitle, setIsTitle ] = useState(false); // 공연제목 입력유무\r\n  // const [ isseat, setIsSeat ] = useState(false); // 좌석수 입력유무\r\n\r\n  const [userList, setUserList] = useState([]); // AxiosApi로 가져온 유저정보를 저장\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const email = (window.localStorage.getItem(\"email\"));\r\n  console.log(email);\r\n\r\n  useEffect(() => {\r\n    if (!email) {\r\n      alert(\"로그인이 필요합니다.\");\r\n      navigate(\"/login\");\r\n    }\r\n  }, []); \r\n\r\n  useEffect(() => {\r\n    // 컴포넌트가 마운트될 때 모든 회원정보를 불러옵니다.\r\n    const fetchUserList = async () => {\r\n        try {\r\n            const response = await AxiosApi.getUserList();\r\n            setUserList(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching performance list', error);\r\n        }\r\n    };\r\n    fetchUserList();\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  console.log(userList);\r\n}, [userList]); // userList가 변경될 때마다 로그를 출력합니다.\r\n  // 입력값을 서버로 전송할 부분\r\n\r\n\r\n  return (\r\n    <>\r\n    <Container>\r\n      <UpdateUserInfo userList={userList}/>\r\n      <UpdateBox userList={userList}/>\r\n    </Container>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default PerformanceUpdate;"],"mappings":"AAAA,MAAO,CAAAA,QAAQ,KAAM,8BAA8B,CACnD,MAAO,CAAAC,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,SAAS,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,gDAAgD,CAClH,MAAO,CAAAC,SAAS,KAAM,uCAAuC,CAC7D,MAAO,CAAAC,cAAc,KAAM,4CAA4C,CACvE,MAAO,CAAAC,cAAc,KAAM,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAIxD,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAE;AAE9C,KAAM,CAAAmB,QAAQ,CAAGlB,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAmB,KAAK,CAAIC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,CACpDC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC,CAElBrB,SAAS,CAAC,IAAM,CACd,GAAI,CAACqB,KAAK,CAAE,CACVM,KAAK,CAAC,aAAa,CAAC,CACpBP,QAAQ,CAAC,QAAQ,CAAC,CACpB,CACF,CAAC,CAAE,EAAE,CAAC,CAENpB,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAA4B,aAAa,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA/B,QAAQ,CAACgC,WAAW,CAAC,CAAC,CAC7CX,WAAW,CAACU,QAAQ,CAACE,IAAI,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACZP,OAAO,CAACO,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CAC3D,CACJ,CAAC,CACDJ,aAAa,CAAC,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN5B,SAAS,CAAC,IAAM,CACdyB,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC,CACvB,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAAE;AACd;AAGA,mBACEN,IAAA,CAAAI,SAAA,EAAAiB,QAAA,cACAnB,KAAA,CAACX,SAAS,EAAA8B,QAAA,eACRrB,IAAA,CAACH,cAAc,EAACS,QAAQ,CAAEA,QAAS,CAAC,CAAC,cACrCN,IAAA,CAACJ,SAAS,EAACU,QAAQ,CAAEA,QAAS,CAAC,CAAC,EACvB,CAAC,CACV,CAAC,CAGP,CAAC,CAED,cAAe,CAAAD,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}