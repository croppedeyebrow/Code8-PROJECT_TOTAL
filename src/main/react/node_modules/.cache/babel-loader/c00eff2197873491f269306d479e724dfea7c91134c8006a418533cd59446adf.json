{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nfunction watchProgress(response, progressCallback) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!response.body || !response.headers) return;\n    const reader = response.body.getReader();\n    const contentLength = Number(response.headers.get('Content-Length')) || 0;\n    let receivedLength = 0;\n    // Process the data\n    const processChunk = value => __awaiter(this, void 0, void 0, function* () {\n      // Add to the received length\n      receivedLength += (value === null || value === void 0 ? void 0 : value.length) || 0;\n      const percentage = Math.round(receivedLength / contentLength * 100);\n      progressCallback(percentage);\n    });\n    const read = () => __awaiter(this, void 0, void 0, function* () {\n      let data;\n      try {\n        data = yield reader.read();\n      } catch (_a) {\n        // Ignore errors because we can only handle the main response\n        return;\n      }\n      // Continue reading data until done\n      if (!data.done) {\n        processChunk(data.value);\n        yield read();\n      }\n    });\n    read();\n  });\n}\nfunction fetchBlob(url, progressCallback, requestInit) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // Fetch the resource\n    const response = yield fetch(url, requestInit);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch \".concat(url, \": \").concat(response.status, \" (\").concat(response.statusText, \")\"));\n    }\n    // Read the data to track progress\n    watchProgress(response.clone(), progressCallback);\n    return response.blob();\n  });\n}\nconst Fetcher = {\n  fetchBlob\n};\nexport default Fetcher;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","watchProgress","response","progressCallback","body","headers","reader","getReader","contentLength","Number","get","receivedLength","processChunk","length","percentage","Math","round","read","data","_a","fetchBlob","url","requestInit","fetch","ok","Error","concat","status","statusText","clone","blob","Fetcher"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/node_modules/wavesurfer.js/dist/fetcher.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction watchProgress(response, progressCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!response.body || !response.headers)\n            return;\n        const reader = response.body.getReader();\n        const contentLength = Number(response.headers.get('Content-Length')) || 0;\n        let receivedLength = 0;\n        // Process the data\n        const processChunk = (value) => __awaiter(this, void 0, void 0, function* () {\n            // Add to the received length\n            receivedLength += (value === null || value === void 0 ? void 0 : value.length) || 0;\n            const percentage = Math.round((receivedLength / contentLength) * 100);\n            progressCallback(percentage);\n        });\n        const read = () => __awaiter(this, void 0, void 0, function* () {\n            let data;\n            try {\n                data = yield reader.read();\n            }\n            catch (_a) {\n                // Ignore errors because we can only handle the main response\n                return;\n            }\n            // Continue reading data until done\n            if (!data.done) {\n                processChunk(data.value);\n                yield read();\n            }\n        });\n        read();\n    });\n}\nfunction fetchBlob(url, progressCallback, requestInit) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Fetch the resource\n        const response = yield fetch(url, requestInit);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch ${url}: ${response.status} (${response.statusText})`);\n        }\n        // Read the data to track progress\n        watchProgress(response.clone(), progressCallback);\n        return response.blob();\n    });\n}\nconst Fetcher = {\n    fetchBlob,\n};\nexport default Fetcher;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAKA,CAACC,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;MAAEA,OAAO,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;EAAE;EAC3G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAASA,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQA,CAACR,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAIA,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAE;IAC7GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,CAAC,CAAC,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACD,SAASO,aAAaA,CAACC,QAAQ,EAAEC,gBAAgB,EAAE;EAC/C,OAAOrB,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,IAAI,CAACoB,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACG,OAAO,EACnC;IACJ,MAAMC,MAAM,GAAGJ,QAAQ,CAACE,IAAI,CAACG,SAAS,CAAC,CAAC;IACxC,MAAMC,aAAa,GAAGC,MAAM,CAACP,QAAQ,CAACG,OAAO,CAACK,GAAG,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC;IACzE,IAAIC,cAAc,GAAG,CAAC;IACtB;IACA,MAAMC,YAAY,GAAIxB,KAAK,IAAKN,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MACzE;MACA6B,cAAc,IAAI,CAACvB,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACyB,MAAM,KAAK,CAAC;MACnF,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAAEL,cAAc,GAAGH,aAAa,GAAI,GAAG,CAAC;MACrEL,gBAAgB,CAACW,UAAU,CAAC;IAChC,CAAC,CAAC;IACF,MAAMG,IAAI,GAAGA,CAAA,KAAMnC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAC5D,IAAIoC,IAAI;MACR,IAAI;QACAA,IAAI,GAAG,MAAMZ,MAAM,CAACW,IAAI,CAAC,CAAC;MAC9B,CAAC,CACD,OAAOE,EAAE,EAAE;QACP;QACA;MACJ;MACA;MACA,IAAI,CAACD,IAAI,CAACpB,IAAI,EAAE;QACZc,YAAY,CAACM,IAAI,CAAC9B,KAAK,CAAC;QACxB,MAAM6B,IAAI,CAAC,CAAC;MAChB;IACJ,CAAC,CAAC;IACFA,IAAI,CAAC,CAAC;EACV,CAAC,CAAC;AACN;AACA,SAASG,SAASA,CAACC,GAAG,EAAElB,gBAAgB,EAAEmB,WAAW,EAAE;EACnD,OAAOxC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD;IACA,MAAMoB,QAAQ,GAAG,MAAMqB,KAAK,CAACF,GAAG,EAAEC,WAAW,CAAC;IAC9C,IAAI,CAACpB,QAAQ,CAACsB,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,oBAAAC,MAAA,CAAoBL,GAAG,QAAAK,MAAA,CAAKxB,QAAQ,CAACyB,MAAM,QAAAD,MAAA,CAAKxB,QAAQ,CAAC0B,UAAU,MAAG,CAAC;IAC1F;IACA;IACA3B,aAAa,CAACC,QAAQ,CAAC2B,KAAK,CAAC,CAAC,EAAE1B,gBAAgB,CAAC;IACjD,OAAOD,QAAQ,CAAC4B,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN;AACA,MAAMC,OAAO,GAAG;EACZX;AACJ,CAAC;AACD,eAAeW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}