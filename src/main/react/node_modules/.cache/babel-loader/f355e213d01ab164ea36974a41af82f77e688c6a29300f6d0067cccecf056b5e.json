{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/** Decode an array buffer into an audio buffer */\nfunction decode(audioData, sampleRate) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const audioCtx = new AudioContext({\n      sampleRate\n    });\n    const decode = audioCtx.decodeAudioData(audioData);\n    return decode.finally(() => audioCtx.close());\n  });\n}\n/** Normalize peaks to -1..1 */\nfunction normalize(channelData) {\n  const firstChannel = channelData[0];\n  if (firstChannel.some(n => n > 1 || n < -1)) {\n    const length = firstChannel.length;\n    let max = 0;\n    for (let i = 0; i < length; i++) {\n      const absN = Math.abs(firstChannel[i]);\n      if (absN > max) max = absN;\n    }\n    for (const channel of channelData) {\n      for (let i = 0; i < length; i++) {\n        channel[i] /= max;\n      }\n    }\n  }\n  return channelData;\n}\n/** Create an audio buffer from pre-decoded audio data */\nfunction createBuffer(channelData, duration) {\n  // If a single array of numbers is passed, make it an array of arrays\n  if (typeof channelData[0] === 'number') channelData = [channelData];\n  // Normalize to -1..1\n  normalize(channelData);\n  return {\n    duration,\n    length: channelData[0].length,\n    sampleRate: channelData[0].length / duration,\n    numberOfChannels: channelData.length,\n    getChannelData: i => channelData === null || channelData === void 0 ? void 0 : channelData[i],\n    copyFromChannel: AudioBuffer.prototype.copyFromChannel,\n    copyToChannel: AudioBuffer.prototype.copyToChannel\n  };\n}\nconst Decoder = {\n  decode,\n  createBuffer\n};\nexport default Decoder;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","decode","audioData","sampleRate","audioCtx","AudioContext","decodeAudioData","finally","close","normalize","channelData","firstChannel","some","n","length","max","i","absN","Math","abs","channel","createBuffer","duration","numberOfChannels","getChannelData","copyFromChannel","AudioBuffer","prototype","copyToChannel","Decoder"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/node_modules/wavesurfer.js/dist/decoder.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** Decode an array buffer into an audio buffer */\nfunction decode(audioData, sampleRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const audioCtx = new AudioContext({ sampleRate });\n        const decode = audioCtx.decodeAudioData(audioData);\n        return decode.finally(() => audioCtx.close());\n    });\n}\n/** Normalize peaks to -1..1 */\nfunction normalize(channelData) {\n    const firstChannel = channelData[0];\n    if (firstChannel.some((n) => n > 1 || n < -1)) {\n        const length = firstChannel.length;\n        let max = 0;\n        for (let i = 0; i < length; i++) {\n            const absN = Math.abs(firstChannel[i]);\n            if (absN > max)\n                max = absN;\n        }\n        for (const channel of channelData) {\n            for (let i = 0; i < length; i++) {\n                channel[i] /= max;\n            }\n        }\n    }\n    return channelData;\n}\n/** Create an audio buffer from pre-decoded audio data */\nfunction createBuffer(channelData, duration) {\n    // If a single array of numbers is passed, make it an array of arrays\n    if (typeof channelData[0] === 'number')\n        channelData = [channelData];\n    // Normalize to -1..1\n    normalize(channelData);\n    return {\n        duration,\n        length: channelData[0].length,\n        sampleRate: channelData[0].length / duration,\n        numberOfChannels: channelData.length,\n        getChannelData: (i) => channelData === null || channelData === void 0 ? void 0 : channelData[i],\n        copyFromChannel: AudioBuffer.prototype.copyFromChannel,\n        copyToChannel: AudioBuffer.prototype.copyToChannel,\n    };\n}\nconst Decoder = {\n    decode,\n    createBuffer,\n};\nexport default Decoder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}