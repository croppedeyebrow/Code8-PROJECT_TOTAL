{"ast":null,"code":"import axios from\"axios\";import Common from\"../utils/Common\";import{CHORD8_DOMAIN,Interceptor}from\"../utils/Common\";// 로그인, 회원가입 axios 모음\nconst SignUpAxios={// 회원가입\nsignup:async(email,password,NickName,name,addr,addrDetale,tel,gender,age,bissNum)=>{const member={userEmail:email,userPassword:password,userNickname:NickName,userName:name,userAddr:addr,userAddrDetale:addrDetale,userPhone:tel,userGen:gender,userAge:age,profileImg:\"https://firebasestorage.googleapis.com/v0/b/chord8-22e59.appspot.com/o/profileImg.png?alt=media&token=8f711968-bb1c-44b3-ae93-42b190befdeb\",BUSINESS_NUM:bissNum};return await axios.post(CHORD8_DOMAIN+\"/auth/sign\",member);},// 이메일 중복 체크\ncheckEmail:async email=>{return await axios.get(CHORD8_DOMAIN+\"/auth/email?email=\".concat(email));},// 이메일 문자 인증\nmemberEmail:async email=>{return await axios.post(CHORD8_DOMAIN+\"/auth/mailConfirm?email=\".concat(email));},// 이메일 인증 번호 체크\n// email 속성 필수\nmemberEpw:async epw=>{return await axios.get(CHORD8_DOMAIN+\"/auth/ePw?epw=\".concat(epw));},// 로그인\nmemberLogin:async(email,password)=>{const login={userEmail:email,userPassword:password};return await axios.post(CHORD8_DOMAIN+\"/auth/login\",login);},// 어드민 로그인\naddminLogin:async(email,password)=>{const login={userEmail:email,userPassword:password};return await axios.post(CHORD8_DOMAIN+\"/auth/addmin\",login);},// 어드민 체크\ncheckAddmin:async()=>{const accessToken=Common.getAccessToken();console.log(\"로그인 상태 체크의 엑세스 토큰 : \",accessToken);// 인터셉터 자체로 리프레쉬 토큰 체크가 있으므로 로그인 체크는 axios를 활용\nreturn await axios.get(CHORD8_DOMAIN+\"/user/isAdmin?accessToken=\".concat(accessToken),{headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \"+accessToken}});},// 닉네임 중복 체크\nmemberNickname:async nickname=>{return await axios.get(CHORD8_DOMAIN+\"/auth/nickName?nickName=\".concat(nickname));},// 전화번호 인증번호 받기\nmemberTel:async tel=>{return await axios.get(CHORD8_DOMAIN+\"/sms/send-mms?tel=\".concat(tel));},// 인증번호 확인\nmemberTelAuth:async cnum=>{return await axios.get(CHORD8_DOMAIN+\"/sms/check?cnum=\".concat(cnum));},// 카카오 토큰 발급\nkakaoLogin:async code=>{return await axios.get(CHORD8_DOMAIN+\"/auth/kakao?code=\".concat(code));},// 카카오 로그인 및 토큰 발급\nkakaoToken:async email=>{return await axios.get(CHORD8_DOMAIN+\"/auth/kakaoToken?email=\".concat(email));},// 이메일 찾기\nfindEmail:async nickname=>{return await axios.get(CHORD8_DOMAIN+\"/auth/find?nickname=\".concat(nickname));},// 비밀번호 변경\nchangePassword:async(nickname,password)=>{const dto={userNickname:nickname,userPassword:password};return await axios.post(CHORD8_DOMAIN+\"/auth/change/password\",dto);},// 로그인 상태 체크\nisLogin:async()=>{const accessToken=Common.getAccessToken();console.log(\"로그인 상태 체크의 엑세스 토큰 : \",accessToken);// 인터셉터 자체로 리프레쉬 토큰 체크가 있으므로 로그인 체크는 axios를 활용\nreturn await axios.get(CHORD8_DOMAIN+\"/user/isLogin?accessToken=\".concat(accessToken),{headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \"+accessToken}});}};export default SignUpAxios;","map":{"version":3,"names":["axios","Common","CHORD8_DOMAIN","Interceptor","SignUpAxios","signup","email","password","NickName","name","addr","addrDetale","tel","gender","age","bissNum","member","userEmail","userPassword","userNickname","userName","userAddr","userAddrDetale","userPhone","userGen","userAge","profileImg","BUSINESS_NUM","post","checkEmail","get","concat","memberEmail","memberEpw","epw","memberLogin","login","addminLogin","checkAddmin","accessToken","getAccessToken","console","log","headers","Authorization","memberNickname","nickname","memberTel","memberTelAuth","cnum","kakaoLogin","code","kakaoToken","findEmail","changePassword","dto","isLogin"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/axios/SignUpAxios.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport Common from \"../utils/Common\";\r\nimport { CHORD8_DOMAIN, Interceptor } from \"../utils/Common\";\r\n\r\n// 로그인, 회원가입 axios 모음\r\nconst SignUpAxios = {\r\n  // 회원가입\r\n  signup: async (\r\n    email,\r\n    password,\r\n    NickName,\r\n    name,\r\n    addr,\r\n    addrDetale,\r\n    tel,\r\n    gender,\r\n    age,\r\n    bissNum\r\n  ) => {\r\n    const member = {\r\n      userEmail: email,\r\n      userPassword: password,\r\n      userNickname: NickName,\r\n      userName: name,\r\n      userAddr: addr,\r\n      userAddrDetale: addrDetale,\r\n      userPhone: tel,\r\n      userGen: gender,\r\n      userAge: age,\r\n      profileImg:\r\n        \"https://firebasestorage.googleapis.com/v0/b/chord8-22e59.appspot.com/o/profileImg.png?alt=media&token=8f711968-bb1c-44b3-ae93-42b190befdeb\",\r\n      BUSINESS_NUM: bissNum,\r\n    };\r\n    return await axios.post(CHORD8_DOMAIN + \"/auth/sign\", member);\r\n  },\r\n\r\n  // 이메일 중복 체크\r\n  checkEmail: async (email) => {\r\n    return await axios.get(CHORD8_DOMAIN + `/auth/email?email=${email}`);\r\n  },\r\n\r\n  // 이메일 문자 인증\r\n  memberEmail: async (email) => {\r\n    return await axios.post(CHORD8_DOMAIN + `/auth/mailConfirm?email=${email}`);\r\n  },\r\n\r\n  // 이메일 인증 번호 체크\r\n  // email 속성 필수\r\n  memberEpw: async (epw) => {\r\n    return await axios.get(CHORD8_DOMAIN + `/auth/ePw?epw=${epw}`);\r\n  },\r\n\r\n  // 로그인\r\n  memberLogin: async (email, password) => {\r\n    const login = {\r\n      userEmail: email,\r\n      userPassword: password,\r\n    };\r\n    return await axios.post(CHORD8_DOMAIN + \"/auth/login\", login);\r\n  },\r\n\r\n  // 어드민 로그인\r\n  addminLogin: async (email, password) => {\r\n    const login = {\r\n      userEmail: email,\r\n      userPassword: password,\r\n    };\r\n    return await axios.post(CHORD8_DOMAIN + \"/auth/addmin\", login);\r\n  },\r\n\r\n  // 어드민 체크\r\n  checkAddmin: async () => {\r\n    const accessToken = Common.getAccessToken();\r\n    console.log(\"로그인 상태 체크의 엑세스 토큰 : \", accessToken);\r\n    // 인터셉터 자체로 리프레쉬 토큰 체크가 있으므로 로그인 체크는 axios를 활용\r\n    return await axios.get(\r\n      CHORD8_DOMAIN + `/user/isAdmin?accessToken=${accessToken}`,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + accessToken,\r\n        },\r\n      }\r\n    );\r\n  },\r\n\r\n  // 닉네임 중복 체크\r\n  memberNickname: async (nickname) => {\r\n    return await axios.get(\r\n      CHORD8_DOMAIN + `/auth/nickName?nickName=${nickname}`\r\n    );\r\n  },\r\n\r\n  // 전화번호 인증번호 받기\r\n  memberTel: async (tel) => {\r\n    return await axios.get(CHORD8_DOMAIN + `/sms/send-mms?tel=${tel}`);\r\n  },\r\n\r\n  // 인증번호 확인\r\n  memberTelAuth: async (cnum) => {\r\n    return await axios.get(CHORD8_DOMAIN + `/sms/check?cnum=${cnum}`);\r\n  },\r\n\r\n  // 카카오 토큰 발급\r\n  kakaoLogin: async (code) => {\r\n    return await axios.get(CHORD8_DOMAIN + `/auth/kakao?code=${code}`);\r\n  },\r\n\r\n  // 카카오 로그인 및 토큰 발급\r\n  kakaoToken: async (email) => {\r\n    return await axios.get(CHORD8_DOMAIN + `/auth/kakaoToken?email=${email}`);\r\n  },\r\n\r\n  // 이메일 찾기\r\n  findEmail: async (nickname) => {\r\n    return await axios.get(CHORD8_DOMAIN + `/auth/find?nickname=${nickname}`);\r\n  },\r\n\r\n  // 비밀번호 변경\r\n  changePassword: async (nickname, password) => {\r\n    const dto = {\r\n      userNickname: nickname,\r\n      userPassword: password,\r\n    };\r\n    return await axios.post(CHORD8_DOMAIN + `/auth/change/password`, dto);\r\n  },\r\n\r\n  // 로그인 상태 체크\r\n  isLogin: async () => {\r\n    const accessToken = Common.getAccessToken();\r\n    console.log(\"로그인 상태 체크의 엑세스 토큰 : \", accessToken);\r\n    // 인터셉터 자체로 리프레쉬 토큰 체크가 있으므로 로그인 체크는 axios를 활용\r\n    return await axios.get(\r\n      CHORD8_DOMAIN + `/user/isLogin?accessToken=${accessToken}`,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + accessToken,\r\n        },\r\n      }\r\n    );\r\n  },\r\n};\r\n\r\nexport default SignUpAxios;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,iBAAiB,CACpC,OAASC,aAAa,CAAEC,WAAW,KAAQ,iBAAiB,CAE5D;AACA,KAAM,CAAAC,WAAW,CAAG,CAClB;AACAC,MAAM,CAAE,KAAAA,CACNC,KAAK,CACLC,QAAQ,CACRC,QAAQ,CACRC,IAAI,CACJC,IAAI,CACJC,UAAU,CACVC,GAAG,CACHC,MAAM,CACNC,GAAG,CACHC,OAAO,GACJ,CACH,KAAM,CAAAC,MAAM,CAAG,CACbC,SAAS,CAAEX,KAAK,CAChBY,YAAY,CAAEX,QAAQ,CACtBY,YAAY,CAAEX,QAAQ,CACtBY,QAAQ,CAAEX,IAAI,CACdY,QAAQ,CAAEX,IAAI,CACdY,cAAc,CAAEX,UAAU,CAC1BY,SAAS,CAAEX,GAAG,CACdY,OAAO,CAAEX,MAAM,CACfY,OAAO,CAAEX,GAAG,CACZY,UAAU,CACR,4IAA4I,CAC9IC,YAAY,CAAEZ,OAChB,CAAC,CACD,MAAO,MAAM,CAAAf,KAAK,CAAC4B,IAAI,CAAC1B,aAAa,CAAG,YAAY,CAAEc,MAAM,CAAC,CAC/D,CAAC,CAED;AACAa,UAAU,CAAE,KAAO,CAAAvB,KAAK,EAAK,CAC3B,MAAO,MAAM,CAAAN,KAAK,CAAC8B,GAAG,CAAC5B,aAAa,sBAAA6B,MAAA,CAAwBzB,KAAK,CAAE,CAAC,CACtE,CAAC,CAED;AACA0B,WAAW,CAAE,KAAO,CAAA1B,KAAK,EAAK,CAC5B,MAAO,MAAM,CAAAN,KAAK,CAAC4B,IAAI,CAAC1B,aAAa,4BAAA6B,MAAA,CAA8BzB,KAAK,CAAE,CAAC,CAC7E,CAAC,CAED;AACA;AACA2B,SAAS,CAAE,KAAO,CAAAC,GAAG,EAAK,CACxB,MAAO,MAAM,CAAAlC,KAAK,CAAC8B,GAAG,CAAC5B,aAAa,kBAAA6B,MAAA,CAAoBG,GAAG,CAAE,CAAC,CAChE,CAAC,CAED;AACAC,WAAW,CAAE,KAAAA,CAAO7B,KAAK,CAAEC,QAAQ,GAAK,CACtC,KAAM,CAAA6B,KAAK,CAAG,CACZnB,SAAS,CAAEX,KAAK,CAChBY,YAAY,CAAEX,QAChB,CAAC,CACD,MAAO,MAAM,CAAAP,KAAK,CAAC4B,IAAI,CAAC1B,aAAa,CAAG,aAAa,CAAEkC,KAAK,CAAC,CAC/D,CAAC,CAED;AACAC,WAAW,CAAE,KAAAA,CAAO/B,KAAK,CAAEC,QAAQ,GAAK,CACtC,KAAM,CAAA6B,KAAK,CAAG,CACZnB,SAAS,CAAEX,KAAK,CAChBY,YAAY,CAAEX,QAChB,CAAC,CACD,MAAO,MAAM,CAAAP,KAAK,CAAC4B,IAAI,CAAC1B,aAAa,CAAG,cAAc,CAAEkC,KAAK,CAAC,CAChE,CAAC,CAED;AACAE,WAAW,CAAE,KAAAA,CAAA,GAAY,CACvB,KAAM,CAAAC,WAAW,CAAGtC,MAAM,CAACuC,cAAc,CAAC,CAAC,CAC3CC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEH,WAAW,CAAC,CAChD;AACA,MAAO,MAAM,CAAAvC,KAAK,CAAC8B,GAAG,CACpB5B,aAAa,8BAAA6B,MAAA,CAAgCQ,WAAW,CAAE,CAC1D,CACEI,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCC,aAAa,CAAE,SAAS,CAAGL,WAC7B,CACF,CACF,CAAC,CACH,CAAC,CAED;AACAM,cAAc,CAAE,KAAO,CAAAC,QAAQ,EAAK,CAClC,MAAO,MAAM,CAAA9C,KAAK,CAAC8B,GAAG,CACpB5B,aAAa,4BAAA6B,MAAA,CAA8Be,QAAQ,CACrD,CAAC,CACH,CAAC,CAED;AACAC,SAAS,CAAE,KAAO,CAAAnC,GAAG,EAAK,CACxB,MAAO,MAAM,CAAAZ,KAAK,CAAC8B,GAAG,CAAC5B,aAAa,sBAAA6B,MAAA,CAAwBnB,GAAG,CAAE,CAAC,CACpE,CAAC,CAED;AACAoC,aAAa,CAAE,KAAO,CAAAC,IAAI,EAAK,CAC7B,MAAO,MAAM,CAAAjD,KAAK,CAAC8B,GAAG,CAAC5B,aAAa,oBAAA6B,MAAA,CAAsBkB,IAAI,CAAE,CAAC,CACnE,CAAC,CAED;AACAC,UAAU,CAAE,KAAO,CAAAC,IAAI,EAAK,CAC1B,MAAO,MAAM,CAAAnD,KAAK,CAAC8B,GAAG,CAAC5B,aAAa,qBAAA6B,MAAA,CAAuBoB,IAAI,CAAE,CAAC,CACpE,CAAC,CAED;AACAC,UAAU,CAAE,KAAO,CAAA9C,KAAK,EAAK,CAC3B,MAAO,MAAM,CAAAN,KAAK,CAAC8B,GAAG,CAAC5B,aAAa,2BAAA6B,MAAA,CAA6BzB,KAAK,CAAE,CAAC,CAC3E,CAAC,CAED;AACA+C,SAAS,CAAE,KAAO,CAAAP,QAAQ,EAAK,CAC7B,MAAO,MAAM,CAAA9C,KAAK,CAAC8B,GAAG,CAAC5B,aAAa,wBAAA6B,MAAA,CAA0Be,QAAQ,CAAE,CAAC,CAC3E,CAAC,CAED;AACAQ,cAAc,CAAE,KAAAA,CAAOR,QAAQ,CAAEvC,QAAQ,GAAK,CAC5C,KAAM,CAAAgD,GAAG,CAAG,CACVpC,YAAY,CAAE2B,QAAQ,CACtB5B,YAAY,CAAEX,QAChB,CAAC,CACD,MAAO,MAAM,CAAAP,KAAK,CAAC4B,IAAI,CAAC1B,aAAa,wBAA0B,CAAEqD,GAAG,CAAC,CACvE,CAAC,CAED;AACAC,OAAO,CAAE,KAAAA,CAAA,GAAY,CACnB,KAAM,CAAAjB,WAAW,CAAGtC,MAAM,CAACuC,cAAc,CAAC,CAAC,CAC3CC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEH,WAAW,CAAC,CAChD;AACA,MAAO,MAAM,CAAAvC,KAAK,CAAC8B,GAAG,CACpB5B,aAAa,8BAAA6B,MAAA,CAAgCQ,WAAW,CAAE,CAC1D,CACEI,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCC,aAAa,CAAE,SAAS,CAAGL,WAC7B,CACF,CACF,CAAC,CACH,CACF,CAAC,CAED,cAAe,CAAAnC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}