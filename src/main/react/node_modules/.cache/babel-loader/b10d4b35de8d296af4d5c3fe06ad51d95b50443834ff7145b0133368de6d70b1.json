{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/dev/PROJECT_TOTAL/src/main/react/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5;import{useState}from\"react\";import styled from\"styled-components\";// 모달 전체 틀\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export const ModalContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  // Modal\\uC744 \\uAD6C\\uD604\\uD558\\uB294\\uB370 \\uC804\\uCCB4\\uC801\\uC73C\\uB85C \\uD544\\uC694\\uD55C CSS\\uB97C \\uAD6C\\uD604\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: \",\";\\n  font-family: \\\"Noto Sans KR\\\", sans-serif;\\n\"])),props=>props.height?props.height:\"100%\");// Modal 표시시 뒷배경 처리\nexport const ModalBackground=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  z-index: 10; //\\uC704\\uCE58\\uC9C0\\uC815 \\uC694\\uC18C\\n  position: fixed;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background-color: rgba(0, 0, 0, 0.2);\\n  backdrop-filter: blur(6px);\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n\"])));// Modal 오픈 버튼\nexport const ModalButton=styled.button(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  background-color: \",\";\\n  color: \",\";\\n  text-decoration: none;\\n  border: none;\\n  width: \",\";\\n  height: \",\";\\n  padding: \",\";\\n  border-radius: 30px;\\n  font-size: \",\";\\n  font-weight: 600;\\n  line-height: \",\";\\n  cursor: grab;\\n\"])),props=>props.bgColor||\"var(--mainblue)\",props=>props.textColor||\"white\",props=>props.width||\"auto\",props=>props.height||\"auto\",props=>props.padding||\"1rem\",props=>props.fontSize||\"1.5rem\",props=>props.lineHeight||\"auto\");export const ExitButton=styled(ModalButton)(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  background-color: \",\";\\n  color: \",\";\\n  border-radius: 5rem;\\n  text-decoration: none;\\n  margin: 1rem;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\"])),props=>props.bgColor||\"var(--mainblue)\",props=>props.textColor||\"white\");export const ModalView=styled.div.attrs(props=>({role:\"dialog\"}))(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  // Modal\\uCC3D CSS\\uB97C \\uAD6C\\uD604\\uD569\\uB2C8\\uB2E4.\\n  display: flex;\\n  background-color: rgba(0, 0, 0, 0);\\n  align-items: center;\\n  flex-direction: column;\\n  border-radius: 2rem;\\n  width: auto;\\n  min-width: 30rem;\\n  max-width: 100rem;\\n  padding: 1rem;\\n  height: auto;\\n  background-color: #ffffff;\\n  > div.desc {\\n    margin: 4rem;\\n    font-size: 1.8rem;\\n  }\\n\"])));export const ModalComponent=_ref=>{let{open,content,customButton,close,openButtonStyle,closeButtonStyle}=_ref;const[isOpen,setIsOpen]=useState(false);// 모달창 열림 여부\nconst openModalHandler=()=>{// isOpen을 true로 설정, 모달창이 열림\nsetIsOpen(!isOpen);};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(ModalContainer,{children:[/*#__PURE__*/_jsx(ModalButton,{onClick:openModalHandler,...openButtonStyle,children:open}),isOpen?/*#__PURE__*/_jsx(ModalBackground,{onClick:openModalHandler,children:/*#__PURE__*/_jsxs(ModalView,{onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"div\",{className:\"desc\",children:content}),customButton&&/*#__PURE__*/_jsx(ExitButton,{onClick:openModalHandler,children:customButton}),/*#__PURE__*/_jsx(ExitButton,{onClick:openModalHandler,...closeButtonStyle,children:close})]})}):null]})});};export default ModalComponent;","map":{"version":3,"names":["useState","styled","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ModalContainer","div","_templateObject","_taggedTemplateLiteral","props","height","ModalBackground","_templateObject2","ModalButton","button","_templateObject3","bgColor","textColor","width","padding","fontSize","lineHeight","ExitButton","_templateObject4","ModalView","attrs","role","_templateObject5","ModalComponent","_ref","open","content","customButton","close","openButtonStyle","closeButtonStyle","isOpen","setIsOpen","openModalHandler","children","onClick","e","stopPropagation","className"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/utils/ModalComponent.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// 모달 전체 틀\r\nexport const ModalContainer = styled.div`\r\n  // Modal을 구현하는데 전체적으로 필요한 CSS를 구현\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: ${(props) => (props.height ? props.height : \"100%\")};\r\n  font-family: \"Noto Sans KR\", sans-serif;\r\n`;\r\n\r\n// Modal 표시시 뒷배경 처리\r\nexport const ModalBackground = styled.div`\r\n  z-index: 10; //위치지정 요소\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  backdrop-filter: blur(6px);\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`;\r\n\r\n// Modal 오픈 버튼\r\nexport const ModalButton = styled.button`\r\n  background-color: ${(props) => props.bgColor || \"var(--mainblue)\"};\r\n  color: ${(props) => props.textColor || \"white\"};\r\n  text-decoration: none;\r\n  border: none;\r\n  width: ${(props) => props.width || \"auto\"};\r\n  height: ${(props) => props.height || \"auto\"};\r\n  padding: ${(props) => props.padding || \"1rem\"};\r\n  border-radius: 30px;\r\n  font-size: ${(props) => props.fontSize || \"1.5rem\"};\r\n  font-weight: 600;\r\n  line-height: ${(props) => props.lineHeight || \"auto\"};\r\n  cursor: grab;\r\n`;\r\n\r\nexport const ExitButton = styled(ModalButton)`\r\n  background-color: ${(props) => props.bgColor || \"var(--mainblue)\"};\r\n  color: ${(props) => props.textColor || \"white\"};\r\n  border-radius: 5rem;\r\n  text-decoration: none;\r\n  margin: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ModalView = styled.div.attrs((props) => ({ role: \"dialog\" }))`\r\n  // Modal창 CSS를 구현합니다.\r\n  display: flex;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  align-items: center;\r\n  flex-direction: column;\r\n  border-radius: 2rem;\r\n  width: auto;\r\n  min-width: 30rem;\r\n  max-width: 100rem;\r\n  padding: 1rem;\r\n  height: auto;\r\n  background-color: #ffffff;\r\n  > div.desc {\r\n    margin: 4rem;\r\n    font-size: 1.8rem;\r\n  }\r\n`;\r\n\r\nexport const ModalComponent = ({\r\n  open,\r\n  content,\r\n  customButton,\r\n  close,\r\n  openButtonStyle,\r\n  closeButtonStyle,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false); // 모달창 열림 여부\r\n\r\n  const openModalHandler = () => {\r\n    // isOpen을 true로 설정, 모달창이 열림\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalContainer>\r\n        <ModalButton onClick={openModalHandler} {...openButtonStyle}>\r\n          {/* 클릭하면 Modal이 열린 상태(isOpen)를 boolean 타입으로 변경하는 메소드가 실행되어야 합니다. */}\r\n          {open}\r\n          {/* 조건부 렌더링을 활용해서 Modal이 열린 상태(isOpen이 true인 상태)일 때는 ModalBtn의 내부 텍스트가 'Opened!' 로 Modal이 닫힌 상태(isOpen이 false인 상태)일 때는 ModalBtn 의 내부 텍스트가 'Open Modal'이 되도록 구현 */}\r\n        </ModalButton>\r\n        {/* 조건부 렌더링을 활용해서 Modal이 열린 상태(isOpen이 true인 상태)일 때만 모달창과 배경이 뜰 수 있게 구현 */}\r\n        {isOpen ? (\r\n          <ModalBackground onClick={openModalHandler}>\r\n            {/* event 버블링을 막는 메소드 */}\r\n            <ModalView onClick={(e) => e.stopPropagation()}>\r\n              <div className=\"desc\">{content}</div>\r\n              {customButton && (\r\n                <ExitButton onClick={openModalHandler}>\r\n                  {customButton}\r\n                </ExitButton>\r\n              )}\r\n              <ExitButton onClick={openModalHandler} {...closeButtonStyle}>\r\n                {close}\r\n              </ExitButton>\r\n            </ModalView>\r\n          </ModalBackground>\r\n        ) : null}\r\n      </ModalContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalComponent;\r\n"],"mappings":"iOAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CAEtC;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBACA,MAAO,MAAM,CAAAC,cAAc,CAAGP,MAAM,CAACQ,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,wQAK3BC,KAAK,EAAMA,KAAK,CAACC,MAAM,CAAGD,KAAK,CAACC,MAAM,CAAG,MAAO,CAE5D,CAED;AACA,MAAO,MAAM,CAAAC,eAAe,CAAGb,MAAM,CAACQ,GAAG,CAAAM,gBAAA,GAAAA,gBAAA,CAAAJ,sBAAA,sRAYxC,CAED;AACA,MAAO,MAAM,CAAAK,WAAW,CAAGf,MAAM,CAACgB,MAAM,CAAAC,gBAAA,GAAAA,gBAAA,CAAAP,sBAAA,oPACjBC,KAAK,EAAKA,KAAK,CAACO,OAAO,EAAI,iBAAiB,CACvDP,KAAK,EAAKA,KAAK,CAACQ,SAAS,EAAI,OAAO,CAGpCR,KAAK,EAAKA,KAAK,CAACS,KAAK,EAAI,MAAM,CAC9BT,KAAK,EAAKA,KAAK,CAACC,MAAM,EAAI,MAAM,CAC/BD,KAAK,EAAKA,KAAK,CAACU,OAAO,EAAI,MAAM,CAE/BV,KAAK,EAAKA,KAAK,CAACW,QAAQ,EAAI,QAAQ,CAElCX,KAAK,EAAKA,KAAK,CAACY,UAAU,EAAI,MAAM,CAErD,CAED,MAAO,MAAM,CAAAC,UAAU,CAAGxB,MAAM,CAACe,WAAW,CAAC,CAAAU,gBAAA,GAAAA,gBAAA,CAAAf,sBAAA,4LACtBC,KAAK,EAAKA,KAAK,CAACO,OAAO,EAAI,iBAAiB,CACvDP,KAAK,EAAKA,KAAK,CAACQ,SAAS,EAAI,OAAO,CAO/C,CAED,MAAO,MAAM,CAAAO,SAAS,CAAG1B,MAAM,CAACQ,GAAG,CAACmB,KAAK,CAAEhB,KAAK,GAAM,CAAEiB,IAAI,CAAE,QAAS,CAAC,CAAC,CAAC,CAAAC,gBAAA,GAAAA,gBAAA,CAAAnB,sBAAA,sYAiBzE,CAED,MAAO,MAAM,CAAAoB,cAAc,CAAGC,IAAA,EAOxB,IAPyB,CAC7BC,IAAI,CACJC,OAAO,CACPC,YAAY,CACZC,KAAK,CACLC,eAAe,CACfC,gBACF,CAAC,CAAAN,IAAA,CACC,KAAM,CAACO,MAAM,CAAEC,SAAS,CAAC,CAAGxC,QAAQ,CAAC,KAAK,CAAC,CAAE;AAE7C,KAAM,CAAAyC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B;AACAD,SAAS,CAAC,CAACD,MAAM,CAAC,CACpB,CAAC,CAED,mBACEpC,IAAA,CAAAI,SAAA,EAAAmC,QAAA,cACErC,KAAA,CAACG,cAAc,EAAAkC,QAAA,eACbvC,IAAA,CAACa,WAAW,EAAC2B,OAAO,CAAEF,gBAAiB,IAAKJ,eAAe,CAAAK,QAAA,CAExDT,IAAI,CAEM,CAAC,CAEbM,MAAM,cACLpC,IAAA,CAACW,eAAe,EAAC6B,OAAO,CAAEF,gBAAiB,CAAAC,QAAA,cAEzCrC,KAAA,CAACsB,SAAS,EAACgB,OAAO,CAAGC,CAAC,EAAKA,CAAC,CAACC,eAAe,CAAC,CAAE,CAAAH,QAAA,eAC7CvC,IAAA,QAAK2C,SAAS,CAAC,MAAM,CAAAJ,QAAA,CAAER,OAAO,CAAM,CAAC,CACpCC,YAAY,eACXhC,IAAA,CAACsB,UAAU,EAACkB,OAAO,CAAEF,gBAAiB,CAAAC,QAAA,CACnCP,YAAY,CACH,CACb,cACDhC,IAAA,CAACsB,UAAU,EAACkB,OAAO,CAAEF,gBAAiB,IAAKH,gBAAgB,CAAAI,QAAA,CACxDN,KAAK,CACI,CAAC,EACJ,CAAC,CACG,CAAC,CAChB,IAAI,EACM,CAAC,CACjB,CAAC,CAEP,CAAC,CAED,cAAe,CAAAL,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}