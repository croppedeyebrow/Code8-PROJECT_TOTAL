{"ast":null,"code":"import React,{useEffect,useState}from'react';import{UpdateZone,InputBox,Button,DescriptionInput,ImageInput,FileButton}from\"../../style/performance/PerformanceUpdateStyle\";import AxiosApi from'../../axios/PerformanceAxios';import DaumPostcode from'react-daum-postcode';import OutsideClickHandler from'react-outside-click-handler';import{storage}from'../../api/firebase';import ModalComponent from'../../utils/ModalComponent';import{useNavigate}from'react-router-dom';import NoneBtnModalComponent from'../../utils/NoneBtnModalComponent';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const UpdateBox=_ref=>{let{userList}=_ref;const navigate=useNavigate();// 입력값 정보 저장\nconst[inputPerformer,setInputPerformer]=useState([]);// 참여자\n// 닉네임 조회 정보 저장용\nconst[searchResults,setSearchResults]=useState([]);// 조회된 회원 정보 저장\nconst[inputValue,setInputValue]=useState('');// 입력필드에 입력값을 저장\nconst[inputVenue,setInputVenue]=useState(\"\");// 공연장소\nconst[inputDetailVenue,setInputDetailVenue]=useState(\"\");// 상세공연장소\nconst[inputDate,setInputDate]=useState(\"\");// 공연일시\nconst[inputPrice,setInputPrice]=useState(\"\");// 공연티켓가격\nconst[inputTitle,setInputTitle]=useState(\"\");// 공연제목\n// 포스터 관련\nconst[file,setFile]=useState(\"\");// 프로필이미지 입력값\nconst[url,setUrl]=useState(\"https://firebasestorage.googleapis.com/v0/b/chord8-22e59.appspot.com/o/%EC%9E%90%EC%82%B0%2022%403x.png?alt=media&token=cff6882e-61bd-4fe5-80b7-778dfcdebfad\");// 업로드된 이미지의 URL\nconst[fileName,setFileName]=useState('');//이미지이름\nconst[isLoading,setIsLoading]=useState(false);// 로딩 상태를 나타내는 상태 변수\nconst[inputSeat,setInputSeat]=useState(\"\");// 좌석수\nconst[inputDescription,setInputDescription]=useState(\"\");// 공연소개\n// 유효성 검사, 포스터이미지, 설명은 없어도 되는 값이므로 제외\nconst[isperformer,setIsPerformer]=useState(false);// 참여자 입력유무\nconst[isvenue,setIsVenue]=useState(false);// 공연장소 입력유무\nconst[isdetailVenue,setIsDetailVenue]=useState(false);// 상세공연장소 입력유무\nconst[isdate,setIsDate]=useState(false);// 공연일시 입력유무\nconst[istitle,setIsTitle]=useState(false);// 공연제목 입력유무\nconst[isseat,setIsSeat]=useState(false);// 좌석수 입력유무\n// 카카오 주소 API 관련\nconst[showPostcode,setShowPostcode]=useState(false);// 모달 오픈 관련\nconst[isModalOpen,setIsModalOpen]=useState(false);// 아래 두 줄은 내가 post를 하기 위해 작성한 거라서, 두 줄은 상황에 맞춰 변경하면 되고 참고하지 않아도 된다.\n// const [calendarlocation, setCalendarLocation] = useState(\"\")\n// const locations = { calendarLocation: calendarlocation }\nuseEffect(()=>{if(inputValue){const filtered=(userList||[]).filter(user=>user.userNickname.includes(inputValue));setSearchResults(filtered);}},[inputValue,userList]);// 조회된 닉네임을 클릭하면 inputPerformer 배열에 추가\nconst handleSelect=nickname=>{if(inputPerformer.includes(nickname)){alert('이미 선택된 회원입니다');}else{setInputPerformer([...inputPerformer,nickname]);}};useEffect(()=>{// inputPerformer의 값이 변경될 때마다 이 로직이 실행됩니다.\n// 여기에 닉네임의 색상을 변경하는 로직을 넣을 수 있습니다.\n},[inputPerformer]);// 모든 닉네임을 지우는 함수\nconst clearAll=()=>{setInputPerformer([]);};// // 참여자 입력값이 변경될 때마다 회원 정보 조회\n// useEffect(() => {\n//   if (inputPerformer) {\n//     const filtered = (userList || []).filter(nickname => \n//       nickname.userNickname.includes(inputPerformer)\n//     );\n//     console.log(filtered);\n//     setSearchResults(filtered);\n//   }\n// }, [inputPerformer, userList]);\n// // 조회된 닉네임을 클릭하면 inputPerformer 배열에 추가\n// const addPerformer = (nickname) => {\n//   if (!inputPerformer.includes(nickname)) {\n//     setInputPerformer([...inputPerformer, nickname]);\n//   }\n// };\n// 주소검색 API 관련\nconst handleComplete=data=>{let fullAddress=data.address;let extraAddress='';if(data.addressType==='R'){if(data.bname!==''){extraAddress+=data.bname;}if(data.buildingName!==''){extraAddress+=extraAddress!==''?\", \".concat(data.buildingName):data.buildingName;}fullAddress+=extraAddress!==''?\" (\".concat(extraAddress,\")\"):'';}setInputVenue(fullAddress);setShowPostcode(false);};// 포스터 이미지 업로드 관련\nconst handleFileInputChange=e=>{const file=e.target.files[0];setFile(e.target.files[0]);setFileName(e.target.files[0].name);console.log(\"파일선택 완료, 이미지명: \"+e.target.files[0].name);uploadFile(file);};// 이미지 업로딩 상태 관련\nconst uploadFile=async file=>{setIsLoading(true);try{const storageRef=storage.ref();const fileRef=storageRef.child(file.name);await fileRef.put(file);// 파일 업로드를 기다립니다.\nconsole.log(\"File uploaded successfully!\");const url=await fileRef.getDownloadURL();// 파일 다운로드 URL을 가져옵니다.\nconsole.log(\"저장경로 확인 : \"+url);setUrl(url);}catch(error){console.error(error);}finally{setIsLoading(false);// 파일 업로드가 끝났을 때 로딩 상태를 false로 설정\n}};// const handleUploadClick = () => {\n//   setIsLoading(true); // 파일 업로드가 시작될 때 로딩 상태를 true로 설정\n//   const storageRef = storage.ref();\n//   const fileRef = storageRef.child(file.name);\n//   fileRef.put(file).then(() => {\n//     console.log(\"File uploaded successfully!\");\n//     fileRef.getDownloadURL().then((url) => {\n//       console.log(\"저장경로 확인 : \" + url);\n//       setUrl(url);\n//       setIsLoading(false); // 파일 업로드가 끝났을 때 로딩 상태를 false로 설정\n//     });\n//   });\n// };\n// 공연 등록버튼 클릭 시 실행되는 함수\nconst onClickSetPerformance=async()=>{const formattedDate=inputDate.replace('T',' ');const performanceData=await AxiosApi.setPerformance(// 공연정보 입력값 BE로 전송\n{performer:inputPerformer,// 참여자\nvenue:inputVenue,// 주소\ndetailVenue:inputDetailVenue,// 상세주소\nperformanceDate:formattedDate,// 공연일시\nprice:inputPrice,// 공연티켓가격\nperformanceName:inputTitle,// 공연제목\nperformanceImage:url,// 포스터\nseatCount:inputSeat,// 좌석수\ndescription:inputDescription// 공연소개\n});console.log(performanceData);// 입력값 확인용 콘솔\nsetIsModalOpen(true);// 공연 등록 완료 후 모달 열기\n// navigate('/Performance');\n// setTimeout(() => {\n//   setIsModalOpen(false); // 일정 시간 후 모달 닫기\n//   navigate('/Performance'); // /Performance 페이지로 이동\n// }, 1000); // 1초 후에 모달을 닫고 페이지를 이동합니다. 시간은 필요에 따라 조정할 수 있습니다.\n};const closeModalAndNavigate=()=>{setIsModalOpen(false);navigate('/Performance');};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(UpdateZone,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uACF5\\uC5F0 \\uB4F1\\uB85D\\uD558\\uAE30\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"performer\",children:[/*#__PURE__*/_jsx(ModalComponent,{open:\"\\uCC38\\uC5EC\\uC790 \\uC785\\uB825\",content:/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%',height:'100%'},children:[\" \",/*#__PURE__*/_jsx(\"div\",{className:\"title\",children:\"\\uCC38\\uC5EC\\uC790 \\uC785\\uB825\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputValue,onChange:e=>setInputValue(e.target.value)}),/*#__PURE__*/_jsx(InputBox,{placeholder:\"\\uC120\\uD0DD\\uB41C \\uB2C9\\uB124\\uC784\",value:inputPerformer.join(', '),readOnly:true}),searchResults.map(user=>/*#__PURE__*/_jsx(\"div\",{onClick:()=>handleSelect(user.userNickname),style:{color:inputPerformer===user.userNickname?'blue':'black',cursor:'pointer'},onMouseOver:e=>e.target.style.color='gray',onMouseOut:e=>e.target.style.color=inputPerformer===user.userNickname?'blue':'black',children:user.userNickname},user.userNickname)),/*#__PURE__*/_jsx(\"button\",{className:\"eraser\",onClick:clearAll,children:\"\\uBAA8\\uB450 \\uC9C0\\uC6B0\\uAE30\"})]}),close:\"\\uB2EB\\uAE30\",customButton:null}),/*#__PURE__*/_jsx(InputBox,{placeholder:\"\\uC120\\uD0DD\\uB41C \\uB2C9\\uB124\\uC784\",value:inputPerformer.join(', '),readOnly:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"inputContainer\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"venue\",children:[\"\\uACF5\\uC5F0 \\uC8FC\\uC18C\",/*#__PURE__*/_jsx(InputBox,{placeholder:\"\\uC8FC\\uC18C\",value:inputVenue,onClick:()=>setShowPostcode(true),readOnly:true}),showPostcode&&/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',zIndex:1000,width:'90%'},children:/*#__PURE__*/_jsx(OutsideClickHandler,{onOutsideClick:()=>{setShowPostcode(false);setInputVenue('');},children:/*#__PURE__*/_jsx(DaumPostcode,{onComplete:handleComplete})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"detailVenue\",children:[\"\\uC0C1\\uC138 \\uC8FC\\uC18C\",/*#__PURE__*/_jsx(InputBox,{placeholder:\"\\uC0C1\\uC138\\uC8FC\\uC18C\",value:inputDetailVenue,onChange:e=>setInputDetailVenue(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"date\",children:[\"\\uC77C\\uC2DC\",/*#__PURE__*/_jsx(InputBox,{type:\"datetime-local\",value:inputDate,onChange:e=>setInputDate(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"price\",children:[\"\\uD2F0\\uCF13 \\uAC00\\uACA9\",/*#__PURE__*/_jsx(InputBox,{placeholder:\"\\uAC00\\uACA9\",value:inputPrice,onChange:e=>setInputPrice(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"title\",children:[\"\\uC81C\\uBAA9\",/*#__PURE__*/_jsx(InputBox,{placeholder:\"\\uC81C\\uBAA9\",value:inputTitle,onChange:e=>setInputTitle(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"poster\",children:[\"\\uD3EC\\uC2A4\\uD130\",/*#__PURE__*/_jsx(ImageInput,{onChange:handleFileInputChange})]}),/*#__PURE__*/_jsx(\"div\",{className:\"uploading\",children:isLoading?/*#__PURE__*/_jsx(\"p\",{children:\"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC \\uC911...\"}):null}),/*#__PURE__*/_jsxs(\"div\",{className:\"seat\",children:[\"\\uC88C\\uC11D \\uC218\",/*#__PURE__*/_jsx(InputBox,{placeholder:\"\\uC88C\\uC11D \\uC218\",value:inputSeat,onChange:e=>setInputSeat(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"discription\",children:[\"\\uC18C\\uAC1C\",/*#__PURE__*/_jsx(DescriptionInput,{value:inputDescription,onChange:e=>setInputDescription(e.target.value)})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"buttonContainer\",children:/*#__PURE__*/_jsx(Button,{enabled:true,onClick:onClickSetPerformance,children:\"\\uB4F1\\uB85D\\uD558\\uAE30\"})})]}),/*#__PURE__*/_jsx(NoneBtnModalComponent,{isOpen:isModalOpen,setIsOpen:setIsModalOpen,content:\"\\uACF5\\uC5F0 \\uB4F1\\uB85D\\uC774 \\uC644\\uB8CC\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\",close:{func:closeModalAndNavigate,text:\"닫기\"}})]});};export default UpdateBox;","map":{"version":3,"names":["React","useEffect","useState","UpdateZone","InputBox","Button","DescriptionInput","ImageInput","FileButton","AxiosApi","DaumPostcode","OutsideClickHandler","storage","ModalComponent","useNavigate","NoneBtnModalComponent","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","UpdateBox","_ref","userList","navigate","inputPerformer","setInputPerformer","searchResults","setSearchResults","inputValue","setInputValue","inputVenue","setInputVenue","inputDetailVenue","setInputDetailVenue","inputDate","setInputDate","inputPrice","setInputPrice","inputTitle","setInputTitle","file","setFile","url","setUrl","fileName","setFileName","isLoading","setIsLoading","inputSeat","setInputSeat","inputDescription","setInputDescription","isperformer","setIsPerformer","isvenue","setIsVenue","isdetailVenue","setIsDetailVenue","isdate","setIsDate","istitle","setIsTitle","isseat","setIsSeat","showPostcode","setShowPostcode","isModalOpen","setIsModalOpen","filtered","filter","user","userNickname","includes","handleSelect","nickname","alert","clearAll","handleComplete","data","fullAddress","address","extraAddress","addressType","bname","buildingName","concat","handleFileInputChange","e","target","files","name","console","log","uploadFile","storageRef","ref","fileRef","child","put","getDownloadURL","error","onClickSetPerformance","formattedDate","replace","performanceData","setPerformance","performer","venue","detailVenue","performanceDate","price","performanceName","performanceImage","seatCount","description","closeModalAndNavigate","children","className","open","content","style","width","height","type","value","onChange","placeholder","join","readOnly","map","onClick","color","cursor","onMouseOver","onMouseOut","close","customButton","position","zIndex","onOutsideClick","onComplete","enabled","isOpen","setIsOpen","func","text"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/component/performance/UpdateBox.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { UpdateZone, InputBox, Button, DescriptionInput, ImageInput, FileButton } from \"../../style/performance/PerformanceUpdateStyle\";\r\nimport AxiosApi from '../../axios/PerformanceAxios';\r\nimport DaumPostcode from 'react-daum-postcode';\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\nimport { storage } from '../../api/firebase';\r\nimport ModalComponent from '../../utils/ModalComponent';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport NoneBtnModalComponent from '../../utils/NoneBtnModalComponent';\r\n\r\n\r\nconst UpdateBox = ({ userList }) => {\r\n  const navigate = useNavigate();\r\n  \r\n  // 입력값 정보 저장\r\n  const [ inputPerformer, setInputPerformer ] = useState([]); // 참여자\r\n  // 닉네임 조회 정보 저장용\r\n  const [searchResults, setSearchResults] = useState([]); // 조회된 회원 정보 저장\r\n  const [inputValue, setInputValue] = useState(''); // 입력필드에 입력값을 저장\r\n  const [ inputVenue, setInputVenue ] = useState(\"\"); // 공연장소\r\n  const [ inputDetailVenue, setInputDetailVenue ] = useState(\"\"); // 상세공연장소\r\n  const [ inputDate, setInputDate ] = useState(\"\"); // 공연일시\r\n  const [ inputPrice, setInputPrice ] = useState(\"\"); // 공연티켓가격\r\n  const [ inputTitle, setInputTitle ] = useState(\"\"); // 공연제목\r\n  // 포스터 관련\r\n  const [file, setFile] = useState(\"\"); // 프로필이미지 입력값\r\n  const [url, setUrl] = useState(\"https://firebasestorage.googleapis.com/v0/b/chord8-22e59.appspot.com/o/%EC%9E%90%EC%82%B0%2022%403x.png?alt=media&token=cff6882e-61bd-4fe5-80b7-778dfcdebfad\"); // 업로드된 이미지의 URL\r\n  const [fileName, setFileName] = useState(''); //이미지이름\r\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태를 나타내는 상태 변수\r\n\r\n  const [ inputSeat, setInputSeat ] = useState(\"\"); // 좌석수\r\n  const [ inputDescription, setInputDescription ] = useState(\"\"); // 공연소개\r\n\r\n  // 유효성 검사, 포스터이미지, 설명은 없어도 되는 값이므로 제외\r\n  const [ isperformer, setIsPerformer ] = useState(false); // 참여자 입력유무\r\n  const [ isvenue, setIsVenue ] = useState(false); // 공연장소 입력유무\r\n  const [ isdetailVenue, setIsDetailVenue ] = useState(false); // 상세공연장소 입력유무\r\n  const [ isdate, setIsDate ] = useState(false); // 공연일시 입력유무\r\n  const [ istitle, setIsTitle ] = useState(false); // 공연제목 입력유무\r\n  const [ isseat, setIsSeat ] = useState(false); // 좌석수 입력유무\r\n  \r\n  // 카카오 주소 API 관련\r\n  const [showPostcode, setShowPostcode] = useState(false);\r\n\r\n  // 모달 오픈 관련\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    \r\n  // 아래 두 줄은 내가 post를 하기 위해 작성한 거라서, 두 줄은 상황에 맞춰 변경하면 되고 참고하지 않아도 된다.\r\n  // const [calendarlocation, setCalendarLocation] = useState(\"\")\r\n  // const locations = { calendarLocation: calendarlocation }\r\n  \r\n  useEffect(() => {\r\n    if (inputValue) {\r\n      const filtered = (userList || []).filter(user => \r\n        user.userNickname.includes(inputValue)\r\n      );\r\n      setSearchResults(filtered);\r\n    }\r\n  }, [inputValue, userList]);\r\n\r\n  // 조회된 닉네임을 클릭하면 inputPerformer 배열에 추가\r\n  const handleSelect = (nickname) => {\r\n    if (inputPerformer.includes(nickname)) {\r\n      alert('이미 선택된 회원입니다');\r\n    } else {\r\n      setInputPerformer([...inputPerformer, nickname]);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // inputPerformer의 값이 변경될 때마다 이 로직이 실행됩니다.\r\n    // 여기에 닉네임의 색상을 변경하는 로직을 넣을 수 있습니다.\r\n  }, [inputPerformer]);\r\n\r\n// 모든 닉네임을 지우는 함수\r\nconst clearAll = () => {\r\n  setInputPerformer([]);\r\n};\r\n\r\n  // // 참여자 입력값이 변경될 때마다 회원 정보 조회\r\n  // useEffect(() => {\r\n  //   if (inputPerformer) {\r\n  //     const filtered = (userList || []).filter(nickname => \r\n  //       nickname.userNickname.includes(inputPerformer)\r\n  //     );\r\n  //     console.log(filtered);\r\n  //     setSearchResults(filtered);\r\n  //   }\r\n  // }, [inputPerformer, userList]);\r\n     \r\n\r\n  // // 조회된 닉네임을 클릭하면 inputPerformer 배열에 추가\r\n  // const addPerformer = (nickname) => {\r\n  //   if (!inputPerformer.includes(nickname)) {\r\n  //     setInputPerformer([...inputPerformer, nickname]);\r\n  //   }\r\n  // };\r\n\r\n  // 주소검색 API 관련\r\n  const handleComplete = (data) => {\r\n    let fullAddress = data.address;\r\n    let extraAddress = ''; \r\n\r\n    if (data.addressType === 'R') {\r\n      if (data.bname !== '') {\r\n        extraAddress += data.bname;\r\n      }\r\n      if (data.buildingName !== '') {\r\n        extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\r\n      }\r\n      fullAddress += (extraAddress !== '' ? ` (${extraAddress})` : '');\r\n    }\r\n\r\n    setInputVenue(fullAddress);\r\n    setShowPostcode(false);\r\n  }\r\n  \r\n  // 포스터 이미지 업로드 관련\r\n  const handleFileInputChange = (e) => {\r\n    const file = e.target.files[0];\r\n    setFile(e.target.files[0]);\r\n    setFileName(e.target.files[0].name);\r\n    console.log(\"파일선택 완료, 이미지명: \" + e.target.files[0].name);\r\n    uploadFile(file);    \r\n  };\r\n  // 이미지 업로딩 상태 관련\r\n  const uploadFile = async (file) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const storageRef = storage.ref();\r\n      const fileRef = storageRef.child(file.name);\r\n      await fileRef.put(file); // 파일 업로드를 기다립니다.\r\n      console.log(\"File uploaded successfully!\");\r\n      const url = await fileRef.getDownloadURL(); // 파일 다운로드 URL을 가져옵니다.\r\n      console.log(\"저장경로 확인 : \" + url);\r\n      setUrl(url);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false); // 파일 업로드가 끝났을 때 로딩 상태를 false로 설정\r\n    }\r\n  };\r\n\r\n  // const handleUploadClick = () => {\r\n  //   setIsLoading(true); // 파일 업로드가 시작될 때 로딩 상태를 true로 설정\r\n  //   const storageRef = storage.ref();\r\n  //   const fileRef = storageRef.child(file.name);\r\n  //   fileRef.put(file).then(() => {\r\n  //     console.log(\"File uploaded successfully!\");\r\n  //     fileRef.getDownloadURL().then((url) => {\r\n  //       console.log(\"저장경로 확인 : \" + url);\r\n  //       setUrl(url);\r\n  //       setIsLoading(false); // 파일 업로드가 끝났을 때 로딩 상태를 false로 설정\r\n  //     });\r\n  //   });\r\n  // };\r\n\r\n  \r\n   // 공연 등록버튼 클릭 시 실행되는 함수\r\n  const onClickSetPerformance = async () => {\r\n    const formattedDate = inputDate.replace('T', ' ');\r\n\r\n    \r\n\r\n    const performanceData = await AxiosApi.setPerformance( // 공연정보 입력값 BE로 전송\r\n      {\r\n        performer: inputPerformer, // 참여자\r\n        venue: inputVenue, // 주소\r\n        detailVenue: inputDetailVenue, // 상세주소\r\n        performanceDate: formattedDate, // 공연일시\r\n        price: inputPrice, // 공연티켓가격\r\n        performanceName: inputTitle, // 공연제목\r\n        performanceImage: url, // 포스터\r\n        seatCount: inputSeat, // 좌석수\r\n        description: inputDescription // 공연소개\r\n      }\r\n    )\r\n    console.log(performanceData); // 입력값 확인용 콘솔\r\n    setIsModalOpen(true); // 공연 등록 완료 후 모달 열기\r\n    // navigate('/Performance');\r\n  // setTimeout(() => {\r\n  //   setIsModalOpen(false); // 일정 시간 후 모달 닫기\r\n  //   navigate('/Performance'); // /Performance 페이지로 이동\r\n  // }, 1000); // 1초 후에 모달을 닫고 페이지를 이동합니다. 시간은 필요에 따라 조정할 수 있습니다.\r\n  }\r\n  const closeModalAndNavigate = () => {\r\n    setIsModalOpen(false);\r\n    navigate('/Performance');\r\n  }\r\n  \r\n  \r\n  \r\n  return (\r\n    <>\r\n      <UpdateZone>\r\n        <h1>공연 등록하기</h1>\r\n        <div className=\"performer\">\r\n          <ModalComponent \r\n          open=\"참여자 입력\" \r\n          content={\r\n            <div style={{ width: '100%', height: '100%' }}> {/* 크기를 최대로 설정 */}\r\n              <div className='title'>참여자 입력</div>\r\n              <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\r\n              <InputBox placeholder=\"선택된 닉네임\" value={inputPerformer.join(', ')} readOnly />\r\n              {searchResults.map(user => (\r\n                <div key={user.userNickname} \r\n                onClick={() => handleSelect(user.userNickname)}\r\n                style={{\r\n                  color: inputPerformer === user.userNickname ? 'blue' : 'black',\r\n                  cursor: 'pointer'\r\n                }}\r\n                onMouseOver={(e) => e.target.style.color = 'gray'}\r\n                onMouseOut={(e) => e.target.style.color = inputPerformer === user.userNickname ? 'blue' : 'black'}>\r\n                  {user.userNickname}\r\n                </div>\r\n              ))}\r\n              <button className='eraser' onClick={clearAll}>모두 지우기</button>\r\n            </div>\r\n          } \r\n          close=\"닫기\" \r\n          customButton={null}\r\n        />\r\n        <InputBox placeholder=\"선택된 닉네임\" value={inputPerformer.join(', ')} readOnly />\r\n          </div>\r\n        <div className=\"inputContainer\">\r\n          \r\n          <div className=\"venue\">\r\n          공연 주소\r\n            <InputBox placeholder=\"주소\" value={inputVenue} onClick={() => setShowPostcode(true)} readOnly />\r\n            {showPostcode && (\r\n              <div style={{ position: 'absolute', zIndex: 1000, width: '90%'}}>\r\n                <OutsideClickHandler onOutsideClick={() => {setShowPostcode(false); setInputVenue('');}}>\r\n                  <DaumPostcode onComplete={handleComplete} />\r\n                </OutsideClickHandler>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"detailVenue\">\r\n            상세 주소\r\n            <InputBox placeholder=\"상세주소\" value={inputDetailVenue} onChange={(e) => setInputDetailVenue(e.target.value)}/>\r\n          </div>\r\n          <div className=\"date\">\r\n            일시\r\n            <InputBox type=\"datetime-local\"  value={inputDate} onChange={(e) => setInputDate(e.target.value)}/>\r\n          </div>\r\n          <div className=\"price\">\r\n            티켓 가격\r\n            <InputBox placeholder=\"가격\" value={inputPrice} onChange={(e) => setInputPrice(e.target.value)}/>\r\n          </div>\r\n          <div className=\"title\">\r\n            제목\r\n            <InputBox placeholder=\"제목\" value={inputTitle} onChange={(e) => setInputTitle(e.target.value)}/>\r\n          </div>\r\n          <div className=\"poster\">\r\n            포스터\r\n            <ImageInput onChange={handleFileInputChange}/>\r\n            {/* <FileButton onClick={() => document.getElementById('file').click()} > 파일 선택</FileButton> */}\r\n          </div>\r\n          <div className=\"uploading\">\r\n          {isLoading ? <p>파일 업로드 중...</p> : null}\r\n          </div>\r\n          <div className=\"seat\">\r\n            좌석 수\r\n            <InputBox placeholder=\"좌석 수\" value={inputSeat} onChange={(e) => setInputSeat(e.target.value)}/>\r\n          </div>\r\n          <div className=\"discription\">\r\n            소개\r\n            <DescriptionInput value={inputDescription} onChange={(e) => setInputDescription(e.target.value)}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"buttonContainer\">\r\n        <Button enabled onClick={onClickSetPerformance}>등록하기</Button>\r\n        </div>\r\n      </UpdateZone>\r\n      <NoneBtnModalComponent \r\n      isOpen={isModalOpen}\r\n      setIsOpen={setIsModalOpen}\r\n      content=\"공연 등록이 완료되었습니다.\"\r\n      close={{ func: closeModalAndNavigate, text: \"닫기\"}} \r\n    />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}