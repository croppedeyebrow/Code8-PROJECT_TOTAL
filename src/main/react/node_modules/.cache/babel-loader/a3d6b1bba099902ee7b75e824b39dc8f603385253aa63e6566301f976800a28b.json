{"ast":null,"code":"import moment from\"moment\";import\"moment/locale/ko\";import axios from\"axios\";moment.locale(\"ko\");export const CHORD8_DOMAIN=\"\";const Common={// accessToken\nsetAccessToken:accessToken=>{return window.localStorage.setItem(\"accessToken\",accessToken);},getAccessToken:()=>{return window.localStorage.getItem(\"accessToken\");},// refreshToken\nsetRefreshToken:refreshToken=>{return window.localStorage.setItem(\"refreshToken\",refreshToken);},getRefreshToken:()=>{return window.localStorage.getItem(\"refreshToken\");},// 카카오 로그인\nSOCKET_URL:\"ws://localhost:8111/ws/comment\",SOCKET_CHAT_URL:\"ws://localhost:8111/ws/chat\",API_KEY:\"a42a4db55c114cff5770a883fc8607f9\",REDIRECT_URL:\"http://localhost:8111/kakao\",SECRET_KEY:\"Xs7FwH1FUNOkspaOszcuw2wZXTQGrEIs\",timeFromNow:timestamp=>{return moment(timestamp).fromNow();},formatDate:timestamp=>{const date=new Date(timestamp);const year=date.getFullYear();const month=(\"0\"+(date.getMonth()+1)).slice(-2);// Adds leading 0 if needed\nconst day=(\"0\"+date.getDate()).slice(-2);const hour=(\"0\"+date.getHours()).slice(-2);const minute=(\"0\"+date.getMinutes()).slice(-2);return\"\".concat(year,\"\\uB144 \").concat(month,\"\\uC6D4 \").concat(day,\"\\uC77C \").concat(hour,\"\\uC2DC \").concat(minute,\"\\uBD84\");},truncateText:(text,maxLength)=>{if(text.length>maxLength){return text.substring(0,maxLength)+\"...\";}return text;},// 401 에러 처리 함수\n// handleUnauthorized: async () => {\n//   console.log(\"handleUnauthorized\");\n//   const refreshToken = Common.getRefreshToken();\n//   const accessToken = Common.getAccessToken();\n//   const config = {\n//     headers: {\n//       Authorization: `Bearer ${accessToken}`,\n//     },\n//   };\n//   try {\n//     const res = await axios.post(\n//       `${Common.KH_DOMAIN}/auth/refresh`,\n//       refreshToken,\n//       config\n//     );\n//     console.log(res.data);\n//     Common.setAccessToken(res.data);\n//     if (res.data) {\n//       Common.setAccessToken(res.data);\n//       // res.data(토큰값)을 가져와야 로컬스토리지에 넣을수 있음\n//       return res.data;\n//     } else {\n//       throw new Error(\"리프레쉬 토큰이 만료 되었습니다.\");\n//     }\n//   } catch (err) {\n//     console.log(err);\n//     return false;\n//   }\n// },\nhandleUnauthorized:async()=>{console.log(\"handleUnauthorized 실행\");const refreshToken=Common.getRefreshToken();const accessToken=Common.getAccessToken();const config={headers:{// \"Content-Type\": \"application/json\",\nAuthorization:\"Bearer \".concat(accessToken)}};try{const res=await axios.post(\"\".concat(CHORD8_DOMAIN,\"/auth/refresh\"),refreshToken,config);console.log(\"401 핸들러 엑세스 토큰 : \",res.data);if(res.data){window.localStorage.setItem(\"accessToken\",res.data);// res.data(토큰값)을 가져와야 로컬스토리지에 넣을수 있음\nreturn res.data;}else{window.localStorage.clear();throw new Error(\"리프레쉬 토큰이 만료 되었습니다.\");}}catch(err){console.log(err);return false;}}};// 인터 셉터\n// 인터 셉터에 refresh 토큰 체크 추가\nexport const Interceptor=axios.create({baseURL:CHORD8_DOMAIN});Interceptor.interceptors.response.use(response=>response,async error=>{const originalRequest=error.config;if(error.response.status===401&&!originalRequest._retry){originalRequest._retry=true;const refreshToken=localStorage.getItem(\"refreshToken\");// console.log(\"인터 셉터의 리프레쉬 토큰 :\", refreshToken);\nif(refreshToken&&refreshToken!==\"\"){const newAccessToken=await Common.handleUnauthorized();console.log(\"인터 셉터의 새로운 토큰\",newAccessToken);// newAccessToken이 false를 반환하는지 확인 후 \"/\"로 이동\nif(newAccessToken){// localStorage.setItem(\"accessToken\", newAccessToken);\nInterceptor.defaults.headers.common[\"Authorization\"]=\"Bearer \"+newAccessToken;return Interceptor(originalRequest);}else{// 리프레시 토큰이 만료되었을 경우\n// 로컬 스토리지 제거\nalert(\"로그인이 만료되었습니다.\");console.log(\"인터셉터의 else\");window.localStorage.clear();window.location.href=\"/\";}}else{alert(\"로그인이 필요합니다.\");}}return Promise.reject(error);}// Interceptor.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (error.response.status === 401 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       const refreshToken = localStorage.getItem(\"refreshToken\");\n//       if (refreshToken && refreshToken !== \"\") {\n//         const newAccessToken = await Common.handleUnauthorized();\n//         // newAccessToken이 false를 반환하는지 확인 후 \"/\"로 이동\n//         if (newAccessToken) {\n//           localStorage.setItem(\"accessToken\", newAccessToken);\n//           Interceptor.defaults.headers.common[\"Authorization\"] =\n//             \"Bearer \" + newAccessToken;\n//           return Interceptor(originalRequest);\n//         } else {\n//           // 리프레시 토큰이 만료되었을 경우\n//           alert(\"토큰이 만료되었습니다.\");\n//           window.location.href = \"/\";\n//         }\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n);export default Common;","map":{"version":3,"names":["moment","axios","locale","CHORD8_DOMAIN","Common","setAccessToken","accessToken","window","localStorage","setItem","getAccessToken","getItem","setRefreshToken","refreshToken","getRefreshToken","SOCKET_URL","SOCKET_CHAT_URL","API_KEY","REDIRECT_URL","SECRET_KEY","timeFromNow","timestamp","fromNow","formatDate","date","Date","year","getFullYear","month","getMonth","slice","day","getDate","hour","getHours","minute","getMinutes","concat","truncateText","text","maxLength","length","substring","handleUnauthorized","console","log","config","headers","Authorization","res","post","data","clear","Error","err","Interceptor","create","baseURL","interceptors","response","use","error","originalRequest","status","_retry","newAccessToken","defaults","common","alert","location","href","Promise","reject"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/utils/Common.jsx"],"sourcesContent":["import moment from \"moment\";\r\nimport \"moment/locale/ko\";\r\nimport axios from \"axios\";\r\nmoment.locale(\"ko\");\r\n\r\nexport const CHORD8_DOMAIN = \"\";\r\n\r\nconst Common = {\r\n  // accessToken\r\n  setAccessToken: (accessToken) => {\r\n    return window.localStorage.setItem(\"accessToken\", accessToken);\r\n  },\r\n  getAccessToken: () => {\r\n    return window.localStorage.getItem(\"accessToken\");\r\n  },\r\n  // refreshToken\r\n  setRefreshToken: (refreshToken) => {\r\n    return window.localStorage.setItem(\"refreshToken\", refreshToken);\r\n  },\r\n  getRefreshToken: () => {\r\n    return window.localStorage.getItem(\"refreshToken\");\r\n  },\r\n\r\n  // 카카오 로그인\r\n\r\n\r\n  SOCKET_URL: \"ws://localhost:8111/ws/comment\",\r\n  SOCKET_CHAT_URL: \"ws://localhost:8111/ws/chat\",\r\n  API_KEY: \"a42a4db55c114cff5770a883fc8607f9\",\r\n  REDIRECT_URL: \"http://localhost:8111/kakao\",\r\n  SECRET_KEY: \"Xs7FwH1FUNOkspaOszcuw2wZXTQGrEIs\",\r\n\r\n  timeFromNow: (timestamp) => {\r\n    return moment(timestamp).fromNow();\r\n  },\r\n  formatDate: (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const year = date.getFullYear();\r\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Adds leading 0 if needed\r\n    const day = (\"0\" + date.getDate()).slice(-2);\r\n    const hour = (\"0\" + date.getHours()).slice(-2);\r\n    const minute = (\"0\" + date.getMinutes()).slice(-2);\r\n    return `${year}년 ${month}월 ${day}일 ${hour}시 ${minute}분`;\r\n  },\r\n  truncateText: (text, maxLength) => {\r\n    if (text.length > maxLength) {\r\n      return text.substring(0, maxLength) + \"...\";\r\n    }\r\n    return text;\r\n  },\r\n  // 401 에러 처리 함수\r\n  // handleUnauthorized: async () => {\r\n  //   console.log(\"handleUnauthorized\");\r\n  //   const refreshToken = Common.getRefreshToken();\r\n  //   const accessToken = Common.getAccessToken();\r\n  //   const config = {\r\n  //     headers: {\r\n  //       Authorization: `Bearer ${accessToken}`,\r\n  //     },\r\n  //   };\r\n  //   try {\r\n  //     const res = await axios.post(\r\n  //       `${Common.KH_DOMAIN}/auth/refresh`,\r\n  //       refreshToken,\r\n  //       config\r\n  //     );\r\n  //     console.log(res.data);\r\n  //     Common.setAccessToken(res.data);\r\n  //     if (res.data) {\r\n  //       Common.setAccessToken(res.data);\r\n  //       // res.data(토큰값)을 가져와야 로컬스토리지에 넣을수 있음\r\n  //       return res.data;\r\n  //     } else {\r\n  //       throw new Error(\"리프레쉬 토큰이 만료 되었습니다.\");\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //     return false;\r\n  //   }\r\n  // },\r\n  handleUnauthorized: async () => {\r\n    console.log(\"handleUnauthorized 실행\");\r\n    const refreshToken = Common.getRefreshToken();\r\n    const accessToken = Common.getAccessToken();\r\n    const config = {\r\n      headers: {\r\n        // \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    };\r\n    try {\r\n      const res = await axios.post(\r\n        `${CHORD8_DOMAIN}/auth/refresh`,\r\n        refreshToken,\r\n        config\r\n      );\r\n      console.log(\"401 핸들러 엑세스 토큰 : \", res.data);\r\n      if (res.data) {\r\n        window.localStorage.setItem(\"accessToken\", res.data);\r\n        // res.data(토큰값)을 가져와야 로컬스토리지에 넣을수 있음\r\n        return res.data;\r\n      } else {\r\n        window.localStorage.clear();\r\n        throw new Error(\"리프레쉬 토큰이 만료 되었습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\n// 인터 셉터\r\n// 인터 셉터에 refresh 토큰 체크 추가\r\nexport const Interceptor = axios.create({\r\n  baseURL: CHORD8_DOMAIN,\r\n});\r\n\r\nInterceptor.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      const refreshToken = localStorage.getItem(\"refreshToken\");\r\n      // console.log(\"인터 셉터의 리프레쉬 토큰 :\", refreshToken);\r\n      if (refreshToken && refreshToken !== \"\") {\r\n        const newAccessToken = await Common.handleUnauthorized();\r\n        console.log(\"인터 셉터의 새로운 토큰\", newAccessToken);\r\n        // newAccessToken이 false를 반환하는지 확인 후 \"/\"로 이동\r\n        if (newAccessToken) {\r\n          // localStorage.setItem(\"accessToken\", newAccessToken);\r\n          Interceptor.defaults.headers.common[\"Authorization\"] =\r\n            \"Bearer \" + newAccessToken;\r\n          return Interceptor(originalRequest);\r\n        } else {\r\n          // 리프레시 토큰이 만료되었을 경우\r\n          // 로컬 스토리지 제거\r\n          alert(\"로그인이 만료되었습니다.\");\r\n          console.log(\"인터셉터의 else\");\r\n          window.localStorage.clear();\r\n          window.location.href = \"/\";\r\n        }\r\n      } else {\r\n        alert(\"로그인이 필요합니다.\");\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n  // Interceptor.interceptors.response.use(\r\n  //   (response) => response,\r\n  //   async (error) => {\r\n  //     const originalRequest = error.config;\r\n  //     if (error.response.status === 401 && !originalRequest._retry) {\r\n  //       originalRequest._retry = true;\r\n  //       const refreshToken = localStorage.getItem(\"refreshToken\");\r\n  //       if (refreshToken && refreshToken !== \"\") {\r\n  //         const newAccessToken = await Common.handleUnauthorized();\r\n  //         // newAccessToken이 false를 반환하는지 확인 후 \"/\"로 이동\r\n  //         if (newAccessToken) {\r\n  //           localStorage.setItem(\"accessToken\", newAccessToken);\r\n  //           Interceptor.defaults.headers.common[\"Authorization\"] =\r\n  //             \"Bearer \" + newAccessToken;\r\n  //           return Interceptor(originalRequest);\r\n  //         } else {\r\n  //           // 리프레시 토큰이 만료되었을 경우\r\n  //           alert(\"토큰이 만료되었습니다.\");\r\n  //           window.location.href = \"/\";\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     return Promise.reject(error);\r\n  //   }\r\n);\r\n\r\nexport default Common;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}