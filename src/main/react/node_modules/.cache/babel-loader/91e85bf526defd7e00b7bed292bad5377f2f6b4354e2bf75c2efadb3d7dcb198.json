{"ast":null,"code":"import React,{createContext,useState,useContext}from'react';// context는 전역적으로 상태를 관리하기 위해서 사용\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";const CartContext=/*#__PURE__*/createContext();// CartContext에 접근할 수 있는 함수를 제공\nexport const useCart=()=>useContext(CartContext);// CartProvider 컴포넌트를 정의, 자식 컴포넌트들에게 cart 관련 데이터와 함수를 제공.\nexport const CartProvider=_ref=>{let{children}=_ref;const[cart,setCart]=useState([]);// 장바구니에 상품을 추가하는 함수\nconst addToCart=(selectedProduct,count,price)=>{// 함수 호출 확인\nconsole.log(\"addToCart 함수 호출!!\");// 새로운 장바구니 아이템 객체를 생성\nconst newCartItem={productName:selectedProduct.productName,// 상품이름\nquantity:count,// 수량\nprice:price,// 단가\ntotalPrice:price*count,// 총 가격\nproductId:selectedProduct.productId// 상품 구분을 위한 상품 ID\n};// 장바구니에 같은 상품이 있는지 확인\nconst existingCartItemIndex=cart.findIndex(item=>item.productId===selectedProduct.productId);let updatedCart;if(existingCartItemIndex>=0){// 기존 상품이 있으면 업데이트\nupdatedCart=cart.map((item,index)=>index===existingCartItemIndex?{...item,quantity:item.quantity+count,totalPrice:item.totalPrice+price*count}:item);}else{// 기존 상품이 없으면 새 상품을 추가\nupdatedCart=[...cart,newCartItem];}// 장바구니 상태를 업데이트\nsetCart(updatedCart);console.log('장바구니에 추가됨:',newCartItem);};// 장바구니 내 특정 상품의 수량을 업데이트하는 함수\nconst updateQuantity=(productId,newQuantity)=>{setCart(cart.map(item=>{if(item.productId===productId){const updatedTotalPrice=item.price*newQuantity;// 새로운 총 가격 계산\nreturn{...item,quantity:newQuantity,totalPrice:updatedTotalPrice};}return item;}));};// 장바구니에 특정 상품을 제거하는 함수\nconst removeFromCart=productId=>{setCart(cart.filter(item=>item.productId!==productId));};// CartContext.Provider를 통해 자식 컴포넌트들에게 cart 상태와 함수들을 제공\nreturn/*#__PURE__*/_jsxs(CartContext.Provider,{value:{cart,addToCart,updateQuantity,removeFromCart},children:[children,\" \"]});};","map":{"version":3,"names":["React","createContext","useState","useContext","jsxs","_jsxs","CartContext","useCart","CartProvider","_ref","children","cart","setCart","addToCart","selectedProduct","count","price","console","log","newCartItem","productName","quantity","totalPrice","productId","existingCartItemIndex","findIndex","item","updatedCart","map","index","updateQuantity","newQuantity","updatedTotalPrice","removeFromCart","filter","Provider","value"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/context/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\n\r\n// context는 전역적으로 상태를 관리하기 위해서 사용\r\nconst CartContext = createContext();\r\n// CartContext에 접근할 수 있는 함수를 제공\r\nexport const useCart = () => useContext(CartContext);\r\n// CartProvider 컴포넌트를 정의, 자식 컴포넌트들에게 cart 관련 데이터와 함수를 제공.\r\nexport const CartProvider = ({ children }) => {\r\n    const [cart, setCart] = useState([]);\r\n    // 장바구니에 상품을 추가하는 함수\r\n    const addToCart = (selectedProduct, count, price) => {\r\n        // 함수 호출 확인\r\n        console.log(\"addToCart 함수 호출!!\");\r\n        // 새로운 장바구니 아이템 객체를 생성\r\n        const newCartItem = {\r\n            productName: selectedProduct.productName, // 상품이름\r\n            quantity: count, // 수량\r\n            price: price, // 단가\r\n            totalPrice: price * count, // 총 가격\r\n            productId: selectedProduct.productId // 상품 구분을 위한 상품 ID\r\n        };\r\n\r\n        // 장바구니에 같은 상품이 있는지 확인\r\n        const existingCartItemIndex = cart.findIndex(item => item.productId === selectedProduct.productId);\r\n        \r\n        let updatedCart;\r\n        if (existingCartItemIndex >= 0) {\r\n            // 기존 상품이 있으면 업데이트\r\n            updatedCart = cart.map((item, index) => \r\n                index === existingCartItemIndex \r\n                    ? { ...item, quantity: item.quantity + count, totalPrice: item.totalPrice + (price * count) }\r\n                    : item\r\n            );\r\n        } else {\r\n            // 기존 상품이 없으면 새 상품을 추가\r\n            updatedCart = [...cart, newCartItem];\r\n        }\r\n        // 장바구니 상태를 업데이트\r\n        setCart(updatedCart);\r\n        console.log('장바구니에 추가됨:', newCartItem);\r\n    };\r\n    \r\n    // 장바구니 내 특정 상품의 수량을 업데이트하는 함수\r\n    const updateQuantity = (productId, newQuantity) => {\r\n        setCart(cart.map(item => {\r\n            if (item.productId === productId) {\r\n                const updatedTotalPrice = item.price * newQuantity; // 새로운 총 가격 계산\r\n                return {\r\n                    ...item,\r\n                    quantity: newQuantity,\r\n                    totalPrice: updatedTotalPrice\r\n                };\r\n            }\r\n            return item;\r\n        }));\r\n    };\r\n\r\n    // 장바구니에 특정 상품을 제거하는 함수\r\n    const removeFromCart = (productId) => {\r\n        setCart(cart.filter(item => item.productId !== productId));\r\n    };\r\n\r\n    // CartContext.Provider를 통해 자식 컴포넌트들에게 cart 상태와 함수들을 제공\r\n    return (\r\n        <CartContext.Provider value={{ cart, addToCart, updateQuantity, removeFromCart }}>\r\n            {children} {/* 자식 컴포넌트들을 렌더링 */}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,KAAQ,OAAO,CAGlE;AAAA,OAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAAC,CAAC,CACnC;AACA,MAAO,MAAM,CAAAM,OAAO,CAAGA,CAAA,GAAMJ,UAAU,CAACG,WAAW,CAAC,CACpD;AACA,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACrC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CACpC;AACA,KAAM,CAAAW,SAAS,CAAGA,CAACC,eAAe,CAAEC,KAAK,CAAEC,KAAK,GAAK,CACjD;AACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAChC;AACA,KAAM,CAAAC,WAAW,CAAG,CAChBC,WAAW,CAAEN,eAAe,CAACM,WAAW,CAAE;AAC1CC,QAAQ,CAAEN,KAAK,CAAE;AACjBC,KAAK,CAAEA,KAAK,CAAE;AACdM,UAAU,CAAEN,KAAK,CAAGD,KAAK,CAAE;AAC3BQ,SAAS,CAAET,eAAe,CAACS,SAAU;AACzC,CAAC,CAED;AACA,KAAM,CAAAC,qBAAqB,CAAGb,IAAI,CAACc,SAAS,CAACC,IAAI,EAAIA,IAAI,CAACH,SAAS,GAAKT,eAAe,CAACS,SAAS,CAAC,CAElG,GAAI,CAAAI,WAAW,CACf,GAAIH,qBAAqB,EAAI,CAAC,CAAE,CAC5B;AACAG,WAAW,CAAGhB,IAAI,CAACiB,GAAG,CAAC,CAACF,IAAI,CAAEG,KAAK,GAC/BA,KAAK,GAAKL,qBAAqB,CACzB,CAAE,GAAGE,IAAI,CAAEL,QAAQ,CAAEK,IAAI,CAACL,QAAQ,CAAGN,KAAK,CAAEO,UAAU,CAAEI,IAAI,CAACJ,UAAU,CAAIN,KAAK,CAAGD,KAAO,CAAC,CAC3FW,IACV,CAAC,CACL,CAAC,IAAM,CACH;AACAC,WAAW,CAAG,CAAC,GAAGhB,IAAI,CAAEQ,WAAW,CAAC,CACxC,CACA;AACAP,OAAO,CAACe,WAAW,CAAC,CACpBV,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEC,WAAW,CAAC,CAC1C,CAAC,CAED;AACA,KAAM,CAAAW,cAAc,CAAGA,CAACP,SAAS,CAAEQ,WAAW,GAAK,CAC/CnB,OAAO,CAACD,IAAI,CAACiB,GAAG,CAACF,IAAI,EAAI,CACrB,GAAIA,IAAI,CAACH,SAAS,GAAKA,SAAS,CAAE,CAC9B,KAAM,CAAAS,iBAAiB,CAAGN,IAAI,CAACV,KAAK,CAAGe,WAAW,CAAE;AACpD,MAAO,CACH,GAAGL,IAAI,CACPL,QAAQ,CAAEU,WAAW,CACrBT,UAAU,CAAEU,iBAChB,CAAC,CACL,CACA,MAAO,CAAAN,IAAI,CACf,CAAC,CAAC,CAAC,CACP,CAAC,CAED;AACA,KAAM,CAAAO,cAAc,CAAIV,SAAS,EAAK,CAClCX,OAAO,CAACD,IAAI,CAACuB,MAAM,CAACR,IAAI,EAAIA,IAAI,CAACH,SAAS,GAAKA,SAAS,CAAC,CAAC,CAC9D,CAAC,CAED;AACA,mBACIlB,KAAA,CAACC,WAAW,CAAC6B,QAAQ,EAACC,KAAK,CAAE,CAAEzB,IAAI,CAAEE,SAAS,CAAEiB,cAAc,CAAEG,cAAe,CAAE,CAAAvB,QAAA,EAC5EA,QAAQ,CAAC,GAAC,EACO,CAAC,CAE/B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}