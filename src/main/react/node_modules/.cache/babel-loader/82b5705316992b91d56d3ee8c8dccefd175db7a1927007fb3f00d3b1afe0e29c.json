{"ast":null,"code":"import EventEmitter from './event-emitter.js';\nclass Player extends EventEmitter {\n  constructor(options) {\n    super();\n    this.isExternalMedia = false;\n    if (options.media) {\n      this.media = options.media;\n      this.isExternalMedia = true;\n    } else {\n      this.media = document.createElement('audio');\n    }\n    // Controls\n    if (options.mediaControls) {\n      this.media.controls = true;\n    }\n    // Autoplay\n    if (options.autoplay) {\n      this.media.autoplay = true;\n    }\n    // Speed\n    if (options.playbackRate != null) {\n      this.onceMediaEvent('canplay', () => {\n        if (options.playbackRate != null) {\n          this.media.playbackRate = options.playbackRate;\n        }\n      });\n    }\n  }\n  onMediaEvent(event, callback, options) {\n    this.media.addEventListener(event, callback, options);\n    return () => this.media.removeEventListener(event, callback);\n  }\n  onceMediaEvent(event, callback) {\n    return this.onMediaEvent(event, callback, {\n      once: true\n    });\n  }\n  getSrc() {\n    return this.media.currentSrc || this.media.src || '';\n  }\n  revokeSrc() {\n    const src = this.getSrc();\n    if (src.startsWith('blob:')) {\n      URL.revokeObjectURL(src);\n    }\n  }\n  setSrc(url, blob) {\n    const src = this.getSrc();\n    if (src === url) return;\n    this.revokeSrc();\n    const newSrc = blob instanceof Blob ? URL.createObjectURL(blob) : url;\n    this.media.src = newSrc;\n    this.media.load();\n  }\n  destroy() {\n    this.media.pause();\n    if (this.isExternalMedia) return;\n    this.media.remove();\n    this.revokeSrc();\n    this.media.src = '';\n    // Load resets the media element to its initial state\n    this.media.load();\n  }\n  setMediaElement(element) {\n    this.media = element;\n  }\n  /** Start playing the audio */\n  play() {\n    return this.media.play();\n  }\n  /** Pause the audio */\n  pause() {\n    this.media.pause();\n  }\n  /** Check if the audio is playing */\n  isPlaying() {\n    return !this.media.paused && !this.media.ended;\n  }\n  /** Jumpt to a specific time in the audio (in seconds) */\n  setTime(time) {\n    this.media.currentTime = time;\n  }\n  /** Get the duration of the audio in seconds */\n  getDuration() {\n    return this.media.duration;\n  }\n  /** Get the current audio position in seconds */\n  getCurrentTime() {\n    return this.media.currentTime;\n  }\n  /** Get the audio volume */\n  getVolume() {\n    return this.media.volume;\n  }\n  /** Set the audio volume */\n  setVolume(volume) {\n    this.media.volume = volume;\n  }\n  /** Get the audio muted state */\n  getMuted() {\n    return this.media.muted;\n  }\n  /** Mute or unmute the audio */\n  setMuted(muted) {\n    this.media.muted = muted;\n  }\n  /** Get the playback speed */\n  getPlaybackRate() {\n    return this.media.playbackRate;\n  }\n  /** Set the playback speed, pass an optional false to NOT preserve the pitch */\n  setPlaybackRate(rate, preservePitch) {\n    // preservePitch is true by default in most browsers\n    if (preservePitch != null) {\n      this.media.preservesPitch = preservePitch;\n    }\n    this.media.playbackRate = rate;\n  }\n  /** Get the HTML media element */\n  getMediaElement() {\n    return this.media;\n  }\n  /** Set a sink id to change the audio output device */\n  setSinkId(sinkId) {\n    // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId\n    const media = this.media;\n    return media.setSinkId(sinkId);\n  }\n}\nexport default Player;","map":{"version":3,"names":["EventEmitter","Player","constructor","options","isExternalMedia","media","document","createElement","mediaControls","controls","autoplay","playbackRate","onceMediaEvent","onMediaEvent","event","callback","addEventListener","removeEventListener","once","getSrc","currentSrc","src","revokeSrc","startsWith","URL","revokeObjectURL","setSrc","url","blob","newSrc","Blob","createObjectURL","load","destroy","pause","remove","setMediaElement","element","play","isPlaying","paused","ended","setTime","time","currentTime","getDuration","duration","getCurrentTime","getVolume","volume","setVolume","getMuted","muted","setMuted","getPlaybackRate","setPlaybackRate","rate","preservePitch","preservesPitch","getMediaElement","setSinkId","sinkId"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/node_modules/wavesurfer.js/dist/player.js"],"sourcesContent":["import EventEmitter from './event-emitter.js';\nclass Player extends EventEmitter {\n    constructor(options) {\n        super();\n        this.isExternalMedia = false;\n        if (options.media) {\n            this.media = options.media;\n            this.isExternalMedia = true;\n        }\n        else {\n            this.media = document.createElement('audio');\n        }\n        // Controls\n        if (options.mediaControls) {\n            this.media.controls = true;\n        }\n        // Autoplay\n        if (options.autoplay) {\n            this.media.autoplay = true;\n        }\n        // Speed\n        if (options.playbackRate != null) {\n            this.onceMediaEvent('canplay', () => {\n                if (options.playbackRate != null) {\n                    this.media.playbackRate = options.playbackRate;\n                }\n            });\n        }\n    }\n    onMediaEvent(event, callback, options) {\n        this.media.addEventListener(event, callback, options);\n        return () => this.media.removeEventListener(event, callback);\n    }\n    onceMediaEvent(event, callback) {\n        return this.onMediaEvent(event, callback, { once: true });\n    }\n    getSrc() {\n        return this.media.currentSrc || this.media.src || '';\n    }\n    revokeSrc() {\n        const src = this.getSrc();\n        if (src.startsWith('blob:')) {\n            URL.revokeObjectURL(src);\n        }\n    }\n    setSrc(url, blob) {\n        const src = this.getSrc();\n        if (src === url)\n            return;\n        this.revokeSrc();\n        const newSrc = blob instanceof Blob ? URL.createObjectURL(blob) : url;\n        this.media.src = newSrc;\n        this.media.load();\n    }\n    destroy() {\n        this.media.pause();\n        if (this.isExternalMedia)\n            return;\n        this.media.remove();\n        this.revokeSrc();\n        this.media.src = '';\n        // Load resets the media element to its initial state\n        this.media.load();\n    }\n    setMediaElement(element) {\n        this.media = element;\n    }\n    /** Start playing the audio */\n    play() {\n        return this.media.play();\n    }\n    /** Pause the audio */\n    pause() {\n        this.media.pause();\n    }\n    /** Check if the audio is playing */\n    isPlaying() {\n        return !this.media.paused && !this.media.ended;\n    }\n    /** Jumpt to a specific time in the audio (in seconds) */\n    setTime(time) {\n        this.media.currentTime = time;\n    }\n    /** Get the duration of the audio in seconds */\n    getDuration() {\n        return this.media.duration;\n    }\n    /** Get the current audio position in seconds */\n    getCurrentTime() {\n        return this.media.currentTime;\n    }\n    /** Get the audio volume */\n    getVolume() {\n        return this.media.volume;\n    }\n    /** Set the audio volume */\n    setVolume(volume) {\n        this.media.volume = volume;\n    }\n    /** Get the audio muted state */\n    getMuted() {\n        return this.media.muted;\n    }\n    /** Mute or unmute the audio */\n    setMuted(muted) {\n        this.media.muted = muted;\n    }\n    /** Get the playback speed */\n    getPlaybackRate() {\n        return this.media.playbackRate;\n    }\n    /** Set the playback speed, pass an optional false to NOT preserve the pitch */\n    setPlaybackRate(rate, preservePitch) {\n        // preservePitch is true by default in most browsers\n        if (preservePitch != null) {\n            this.media.preservesPitch = preservePitch;\n        }\n        this.media.playbackRate = rate;\n    }\n    /** Get the HTML media element */\n    getMediaElement() {\n        return this.media;\n    }\n    /** Set a sink id to change the audio output device */\n    setSinkId(sinkId) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId\n        const media = this.media;\n        return media.setSinkId(sinkId);\n    }\n}\nexport default Player;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,oBAAoB;AAC7C,MAAMC,MAAM,SAASD,YAAY,CAAC;EAC9BE,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAID,OAAO,CAACE,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAGF,OAAO,CAACE,KAAK;MAC1B,IAAI,CAACD,eAAe,GAAG,IAAI;IAC/B,CAAC,MACI;MACD,IAAI,CAACC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAChD;IACA;IACA,IAAIJ,OAAO,CAACK,aAAa,EAAE;MACvB,IAAI,CAACH,KAAK,CAACI,QAAQ,GAAG,IAAI;IAC9B;IACA;IACA,IAAIN,OAAO,CAACO,QAAQ,EAAE;MAClB,IAAI,CAACL,KAAK,CAACK,QAAQ,GAAG,IAAI;IAC9B;IACA;IACA,IAAIP,OAAO,CAACQ,YAAY,IAAI,IAAI,EAAE;MAC9B,IAAI,CAACC,cAAc,CAAC,SAAS,EAAE,MAAM;QACjC,IAAIT,OAAO,CAACQ,YAAY,IAAI,IAAI,EAAE;UAC9B,IAAI,CAACN,KAAK,CAACM,YAAY,GAAGR,OAAO,CAACQ,YAAY;QAClD;MACJ,CAAC,CAAC;IACN;EACJ;EACAE,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAEZ,OAAO,EAAE;IACnC,IAAI,CAACE,KAAK,CAACW,gBAAgB,CAACF,KAAK,EAAEC,QAAQ,EAAEZ,OAAO,CAAC;IACrD,OAAO,MAAM,IAAI,CAACE,KAAK,CAACY,mBAAmB,CAACH,KAAK,EAAEC,QAAQ,CAAC;EAChE;EACAH,cAAcA,CAACE,KAAK,EAAEC,QAAQ,EAAE;IAC5B,OAAO,IAAI,CAACF,YAAY,CAACC,KAAK,EAAEC,QAAQ,EAAE;MAAEG,IAAI,EAAE;IAAK,CAAC,CAAC;EAC7D;EACAC,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACd,KAAK,CAACe,UAAU,IAAI,IAAI,CAACf,KAAK,CAACgB,GAAG,IAAI,EAAE;EACxD;EACAC,SAASA,CAAA,EAAG;IACR,MAAMD,GAAG,GAAG,IAAI,CAACF,MAAM,CAAC,CAAC;IACzB,IAAIE,GAAG,CAACE,UAAU,CAAC,OAAO,CAAC,EAAE;MACzBC,GAAG,CAACC,eAAe,CAACJ,GAAG,CAAC;IAC5B;EACJ;EACAK,MAAMA,CAACC,GAAG,EAAEC,IAAI,EAAE;IACd,MAAMP,GAAG,GAAG,IAAI,CAACF,MAAM,CAAC,CAAC;IACzB,IAAIE,GAAG,KAAKM,GAAG,EACX;IACJ,IAAI,CAACL,SAAS,CAAC,CAAC;IAChB,MAAMO,MAAM,GAAGD,IAAI,YAAYE,IAAI,GAAGN,GAAG,CAACO,eAAe,CAACH,IAAI,CAAC,GAAGD,GAAG;IACrE,IAAI,CAACtB,KAAK,CAACgB,GAAG,GAAGQ,MAAM;IACvB,IAAI,CAACxB,KAAK,CAAC2B,IAAI,CAAC,CAAC;EACrB;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC5B,KAAK,CAAC6B,KAAK,CAAC,CAAC;IAClB,IAAI,IAAI,CAAC9B,eAAe,EACpB;IACJ,IAAI,CAACC,KAAK,CAAC8B,MAAM,CAAC,CAAC;IACnB,IAAI,CAACb,SAAS,CAAC,CAAC;IAChB,IAAI,CAACjB,KAAK,CAACgB,GAAG,GAAG,EAAE;IACnB;IACA,IAAI,CAAChB,KAAK,CAAC2B,IAAI,CAAC,CAAC;EACrB;EACAI,eAAeA,CAACC,OAAO,EAAE;IACrB,IAAI,CAAChC,KAAK,GAAGgC,OAAO;EACxB;EACA;EACAC,IAAIA,CAAA,EAAG;IACH,OAAO,IAAI,CAACjC,KAAK,CAACiC,IAAI,CAAC,CAAC;EAC5B;EACA;EACAJ,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC7B,KAAK,CAAC6B,KAAK,CAAC,CAAC;EACtB;EACA;EACAK,SAASA,CAAA,EAAG;IACR,OAAO,CAAC,IAAI,CAAClC,KAAK,CAACmC,MAAM,IAAI,CAAC,IAAI,CAACnC,KAAK,CAACoC,KAAK;EAClD;EACA;EACAC,OAAOA,CAACC,IAAI,EAAE;IACV,IAAI,CAACtC,KAAK,CAACuC,WAAW,GAAGD,IAAI;EACjC;EACA;EACAE,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACxC,KAAK,CAACyC,QAAQ;EAC9B;EACA;EACAC,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC1C,KAAK,CAACuC,WAAW;EACjC;EACA;EACAI,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC3C,KAAK,CAAC4C,MAAM;EAC5B;EACA;EACAC,SAASA,CAACD,MAAM,EAAE;IACd,IAAI,CAAC5C,KAAK,CAAC4C,MAAM,GAAGA,MAAM;EAC9B;EACA;EACAE,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAAC9C,KAAK,CAAC+C,KAAK;EAC3B;EACA;EACAC,QAAQA,CAACD,KAAK,EAAE;IACZ,IAAI,CAAC/C,KAAK,CAAC+C,KAAK,GAAGA,KAAK;EAC5B;EACA;EACAE,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACjD,KAAK,CAACM,YAAY;EAClC;EACA;EACA4C,eAAeA,CAACC,IAAI,EAAEC,aAAa,EAAE;IACjC;IACA,IAAIA,aAAa,IAAI,IAAI,EAAE;MACvB,IAAI,CAACpD,KAAK,CAACqD,cAAc,GAAGD,aAAa;IAC7C;IACA,IAAI,CAACpD,KAAK,CAACM,YAAY,GAAG6C,IAAI;EAClC;EACA;EACAG,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACtD,KAAK;EACrB;EACA;EACAuD,SAASA,CAACC,MAAM,EAAE;IACd;IACA,MAAMxD,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,OAAOA,KAAK,CAACuD,SAAS,CAACC,MAAM,CAAC;EAClC;AACJ;AACA,eAAe5D,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}