{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/dev/PROJECT_TOTAL/src/main/react/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;import React,{Component}from\"react\";import WaveSurfer from\"wavesurfer.js\";import styled from\"styled-components\";import playimg from\"../../images/musicplay.gif\";import pauseimg from\"../../images/pause.gif\";// WaveformContainer 스타일 컴포넌트를 정의합니다.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const WaveformContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: center;\\n  height: 5.4rem;\\n  width: 100%;\\n  background: transparent;\\n  // gap: 2rem;\\n  // border: 1px solid red;\\n\"])));// Wave 스타일 컴포넌트를 정의합니다.\nconst Wave=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 3rem;\\n\\n  position: relative;\\n\"])));// PlayButton 스타일 컴포넌트를 정의합니다.\nconst PlayButton=styled.button(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: flex;\\n  position: relative;\\n  justify-content: center;\\n  align-items: center;\\n  width: 4rem;\\n  height: 4rem;\\n  border-radius: 50%;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  // padding-bottom: 3px;\\n  background: none;\\n\\n  img {\\n    width: 100%;\\n    height: 100%;\\n  }\\n\\n  &:hover {\\n    transform: scale(1.15);\\n  }\\n\"])));class Waveform extends Component{constructor(props){super(props);this.initializeWaveSurfer=()=>{const options={barWidth:8,barRadius:3,barGap:2,barMinHeight:1,cursorWidth:1,container:this.waveformRef,backend:\"WebAudio\",height:30,progressColor:\"#61E6CA\",responsive:true,waveColor:\"#008BFF\",cursorColor:\"transparent\"};this.waveform=WaveSurfer.create(options);};// 음원트랙 로드.\nthis.loadMusic=music=>{if(this.waveform){this.waveform.load(music);}};// 재생 및 중지 상태 조절하기.\nthis.handlePlay=()=>{const{playing}=this.state;this.setState({playing:!playing},()=>{if(this.waveform){this.waveform.playPause();}});};this.state={playing:false};this.waveform=null;this.audioRef=/*#__PURE__*/React.createRef();}componentDidMount(){this.initializeWaveSurfer();this.loadMusic(this.props.music);}componentWillUnmount(){if(this.waveform){this.waveform.destroy();}}componentDidUpdate(prevProps){// 외부로부터 전달된 음악 파일이 변경되면 새로 로드합니다.\nif(prevProps.music!==this.props.music){this.loadMusic(this.props.music);}}render(){const{music}=this.props;const{playing}=this.state;return/*#__PURE__*/_jsxs(WaveformContainer,{children:[/*#__PURE__*/_jsx(PlayButton,{playing:this.state.playing,onClick:this.handlePlay,children:/*#__PURE__*/_jsx(\"img\",{src:playing?playimg:pauseimg,alt:playing?\"Pause\":\"Play\"})}),/*#__PURE__*/_jsx(Wave,{id:\"waveform\",ref:ref=>this.waveformRef=ref}),/*#__PURE__*/_jsx(\"audio\",{ref:this.audioRef,src:music})]});}}export default Waveform;","map":{"version":3,"names":["React","Component","WaveSurfer","styled","playimg","pauseimg","jsx","_jsx","jsxs","_jsxs","WaveformContainer","div","_templateObject","_taggedTemplateLiteral","Wave","_templateObject2","PlayButton","button","_templateObject3","Waveform","constructor","props","initializeWaveSurfer","options","barWidth","barRadius","barGap","barMinHeight","cursorWidth","container","waveformRef","backend","height","progressColor","responsive","waveColor","cursorColor","waveform","create","loadMusic","music","load","handlePlay","playing","state","setState","playPause","audioRef","createRef","componentDidMount","componentWillUnmount","destroy","componentDidUpdate","prevProps","render","children","onClick","src","alt","id","ref"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/component/musicList/MusicPlayer.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport WaveSurfer from \"wavesurfer.js\";\r\nimport styled from \"styled-components\";\r\nimport playimg from \"../../images/musicplay.gif\";\r\nimport pauseimg from \"../../images/pause.gif\";\r\n\r\n// WaveformContainer 스타일 컴포넌트를 정의합니다.\r\nconst WaveformContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 5.4rem;\r\n  width: 100%;\r\n  background: transparent;\r\n  // gap: 2rem;\r\n  // border: 1px solid red;\r\n`;\r\n\r\n// Wave 스타일 컴포넌트를 정의합니다.\r\nconst Wave = styled.div`\r\n  width: 100%;\r\n  height: 3rem;\r\n\r\n  position: relative;\r\n`;\r\n\r\n// PlayButton 스타일 컴포넌트를 정의합니다.\r\nconst PlayButton = styled.button`\r\n  display: flex;\r\n  position: relative;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 4rem;\r\n  height: 4rem;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  // padding-bottom: 3px;\r\n  background: none;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  &:hover {\r\n    transform: scale(1.15);\r\n  }\r\n`;\r\n\r\nclass Waveform extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playing: false,\r\n    };\r\n    this.waveform = null;\r\n    this.audioRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initializeWaveSurfer();\r\n    this.loadMusic(this.props.music);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.waveform) {\r\n      this.waveform.destroy();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // 외부로부터 전달된 음악 파일이 변경되면 새로 로드합니다.\r\n    if (prevProps.music !== this.props.music) {\r\n      this.loadMusic(this.props.music);\r\n    }\r\n  }\r\n\r\n  initializeWaveSurfer = () => {\r\n    const options = {\r\n      barWidth: 8,\r\n      barRadius: 3,\r\n      barGap: 2,\r\n      barMinHeight: 1,\r\n      cursorWidth: 1,\r\n      container: this.waveformRef,\r\n      backend: \"WebAudio\",\r\n      height: 30,\r\n      progressColor: \"#61E6CA\",\r\n      responsive: true,\r\n      waveColor: \"#008BFF\",\r\n      cursorColor: \"transparent\",\r\n    };\r\n\r\n    this.waveform = WaveSurfer.create(options);\r\n  };\r\n\r\n  // 음원트랙 로드.\r\n  loadMusic = (music) => {\r\n    if (this.waveform) {\r\n      this.waveform.load(music);\r\n    }\r\n  };\r\n\r\n  // 재생 및 중지 상태 조절하기.\r\n  handlePlay = () => {\r\n    const { playing } = this.state;\r\n    this.setState({ playing: !playing }, () => {\r\n      if (this.waveform) {\r\n        this.waveform.playPause();\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { music } = this.props;\r\n    const { playing } = this.state;\r\n\r\n    return (\r\n      <WaveformContainer>\r\n        {/* 재생/일시정지 버튼을 렌더링하고 클릭 시 handlePlay 함수를 호출!*/}\r\n        <PlayButton playing={this.state.playing} onClick={this.handlePlay}>\r\n          <img\r\n            src={playing ? playimg : pauseimg}\r\n            alt={playing ? \"Pause\" : \"Play\"}\r\n          />\r\n        </PlayButton>\r\n\r\n        {/* Waveform을 표시할 영역 */}\r\n        <Wave id=\"waveform\" ref={(ref) => (this.waveformRef = ref)} />\r\n\r\n        {/* 오디오 트랙을 설정합니다. */}\r\n        <audio ref={this.audioRef} src={music} />\r\n        {/* 재생 시간을 나타내는 부분입니다. */}\r\n      </WaveformContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Waveform;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}