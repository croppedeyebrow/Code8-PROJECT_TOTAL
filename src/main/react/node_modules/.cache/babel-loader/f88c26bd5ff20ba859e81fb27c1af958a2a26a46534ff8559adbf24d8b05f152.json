{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/dev/PROJECT_TOTAL/src/main/react/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5;import{useState}from\"react\";import styled from\"styled-components\";// 모달 전체 틀\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export const ModalContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  // Modal\\uC744 \\uAD6C\\uD604\\uD558\\uB294\\uB370 \\uC804\\uCCB4\\uC801\\uC73C\\uB85C \\uD544\\uC694\\uD55C CSS\\uB97C \\uAD6C\\uD604\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n  font-family: \\\"Noto Sans KR\\\", sans-serif;\\n\"])));// Modal 표시시 뒷배경 처리\nexport const ModalBackground=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  z-index: 5; //\\uC704\\uCE58\\uC9C0\\uC815 \\uC694\\uC18C\\n  position: fixed;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background-color: rgba(0, 0, 0, 0.2);\\n  backdrop-filter: blur(6px);\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n\"])));// Modal 오픈 버튼\nexport const ModalButton=styled.button(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  background-color: \",\";\\n  color: \",\";\\n  text-decoration: none;\\n  border: none;\\n  width: \",\";\\n  height: \",\";\\n  padding: \",\";\\n  border-radius: 30px;\\n  font-size: \",\";\\n  font-weight: 600;\\n  line-height: \",\";\\n\\n  cursor: grab;\\n\"])),props=>props.bgColor||\"var(--mainblue)\",props=>props.textColor||\"white\",props=>props.width||\"auto\",props=>props.height||\"auto\",props=>props.padding||\"1rem\",props=>props.fontSize||\"1.5rem\",props=>props.lineHeight||\"auto\");export const ExitButton=styled(ModalButton)(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  background-color: \",\";\\n  color: \",\";\\n  border-radius: 5rem;\\n  text-decoration: none;\\n  margin: 1rem;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\"])),props=>props.bgColor||\"var(--mainblue)\",props=>props.textColor||\"white\");export const ModalView=styled.div.attrs(props=>({role:\"dialog\"}))(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  // Modal\\uCC3D CSS\\uB97C \\uAD6C\\uD604\\uD569\\uB2C8\\uB2E4.\\n  display: flex;\\n  background-color: rgba(0, 0, 0, 0);\\n  align-items: center;\\n  flex-direction: column;\\n  border-radius: 2rem;\\n  width: auto;\\n  min-width: 30rem;\\n  max-width: 100rem;\\n  padding: 1rem;\\n  height: auto;\\n  background-color: #ffffff;\\n  > div.desc {\\n    margin: 4rem;\\n    font-size: 1.8rem;\\n  }\\n\"])));// 사용법\n/*\r\n사용하고자 하는 파일에서 아래와 같이 useState를 선언합니다.\r\nex// const [isModalOpen, setIsModalOpen] = useState(false);\r\n모달컴포넌트를 선언할 때 \r\n<NoneBtnModalComponent \r\n      isOpen={isModalOpen} // useState로 선언한 변수를 isOpen에 넣습니다.\r\n      setIsOpen={setIsModalOpen} // useState로 선언한 변수를 setIsOpen에 넣습니다.\r\n      content=\"공연 등록이 완료되었습니다.\" // 모달창에 표시할 내용을 content에 넣습니다.\r\n      close={{ func: closeModalAndNavigate, text: \"닫기\"}}  // 모달창을 닫을 때 실행할 함수와 버튼에 표시할 텍스트를 close에 넣습니다.\r\n      func 또는 text 하나씩 단독사용도 가능합니다.\r\n      customButton=\"확인\" // 모달창에 표시할 버튼 텍스트를 customButton에 넣습니다. 안 써도 됩니다.\r\n      closeButtonStyle={{ bgColor: \"blue\", textColor: \"white\" }} // 모달창을 닫을 때 버튼의 배경색과 글자색을 설정합니다. 따로 사용하지 않으면\r\n      기본 스타일이 적용됩니다. 배경과 글자색만 쓸 수 있습니다.\r\n    />\r\n    아래와 같이 설정합니다.\r\n*/export const NoneBtnModalComponent=_ref=>{let{isOpen,setIsOpen,content,customButton,close,closeButtonStyle}=_ref;const closeModalHandler=()=>{setIsOpen(false);if(close&&close.func){close.func();}};const customButtonHandler=()=>{if(customButton&&customButton.func){customButton.func();}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(ModalContainer,{children:isOpen?/*#__PURE__*/_jsx(ModalBackground,{onClick:closeModalHandler,children:/*#__PURE__*/_jsxs(ModalView,{onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"div\",{className:\"desc\",children:content}),customButton&&/*#__PURE__*/_jsx(ExitButton,{onClick:customButtonHandler,children:customButton&&customButton.text}),/*#__PURE__*/_jsx(ExitButton,{onClick:closeModalHandler,...closeButtonStyle,children:close&&close.text})]})}):null})});};export default NoneBtnModalComponent;","map":{"version":3,"names":["useState","styled","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ModalContainer","div","_templateObject","_taggedTemplateLiteral","ModalBackground","_templateObject2","ModalButton","button","_templateObject3","props","bgColor","textColor","width","height","padding","fontSize","lineHeight","ExitButton","_templateObject4","ModalView","attrs","role","_templateObject5","NoneBtnModalComponent","_ref","isOpen","setIsOpen","content","customButton","close","closeButtonStyle","closeModalHandler","func","customButtonHandler","children","onClick","e","stopPropagation","className","text"],"sources":["C:/dev/PROJECT_TOTAL/src/main/react/src/utils/NoneBtnModalComponent.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// 모달 전체 틀\r\nexport const ModalContainer = styled.div`\r\n  // Modal을 구현하는데 전체적으로 필요한 CSS를 구현\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  font-family: \"Noto Sans KR\", sans-serif;\r\n`;\r\n\r\n// Modal 표시시 뒷배경 처리\r\nexport const ModalBackground = styled.div`\r\n  z-index: 5; //위치지정 요소\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  backdrop-filter: blur(6px);\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`;\r\n\r\n// Modal 오픈 버튼\r\nexport const ModalButton = styled.button`\r\n  background-color: ${(props) => props.bgColor || \"var(--mainblue)\"};\r\n  color: ${(props) => props.textColor || \"white\"};\r\n  text-decoration: none;\r\n  border: none;\r\n  width: ${(props) => props.width || \"auto\"};\r\n  height: ${(props) => props.height || \"auto\"};\r\n  padding: ${(props) => props.padding || \"1rem\"};\r\n  border-radius: 30px;\r\n  font-size: ${(props) => props.fontSize || \"1.5rem\"};\r\n  font-weight: 600;\r\n  line-height: ${(props) => props.lineHeight || \"auto\"};\r\n\r\n  cursor: grab;\r\n`;\r\n\r\nexport const ExitButton = styled(ModalButton)`\r\n  background-color: ${(props) => props.bgColor || \"var(--mainblue)\"};\r\n  color: ${(props) => props.textColor || \"white\"};\r\n  border-radius: 5rem;\r\n  text-decoration: none;\r\n  margin: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ModalView = styled.div.attrs((props) => ({ role: \"dialog\" }))`\r\n  // Modal창 CSS를 구현합니다.\r\n  display: flex;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  align-items: center;\r\n  flex-direction: column;\r\n  border-radius: 2rem;\r\n  width: auto;\r\n  min-width: 30rem;\r\n  max-width: 100rem;\r\n  padding: 1rem;\r\n  height: auto;\r\n  background-color: #ffffff;\r\n  > div.desc {\r\n    margin: 4rem;\r\n    font-size: 1.8rem;\r\n  }\r\n`;\r\n// 사용법\r\n/*\r\n사용하고자 하는 파일에서 아래와 같이 useState를 선언합니다.\r\nex// const [isModalOpen, setIsModalOpen] = useState(false);\r\n모달컴포넌트를 선언할 때 \r\n<NoneBtnModalComponent \r\n      isOpen={isModalOpen} // useState로 선언한 변수를 isOpen에 넣습니다.\r\n      setIsOpen={setIsModalOpen} // useState로 선언한 변수를 setIsOpen에 넣습니다.\r\n      content=\"공연 등록이 완료되었습니다.\" // 모달창에 표시할 내용을 content에 넣습니다.\r\n      close={{ func: closeModalAndNavigate, text: \"닫기\"}}  // 모달창을 닫을 때 실행할 함수와 버튼에 표시할 텍스트를 close에 넣습니다.\r\n      func 또는 text 하나씩 단독사용도 가능합니다.\r\n      customButton=\"확인\" // 모달창에 표시할 버튼 텍스트를 customButton에 넣습니다. 안 써도 됩니다.\r\n      closeButtonStyle={{ bgColor: \"blue\", textColor: \"white\" }} // 모달창을 닫을 때 버튼의 배경색과 글자색을 설정합니다. 따로 사용하지 않으면\r\n      기본 스타일이 적용됩니다. 배경과 글자색만 쓸 수 있습니다.\r\n    />\r\n    아래와 같이 설정합니다.\r\n*/\r\nexport const NoneBtnModalComponent = ({\r\n  isOpen,\r\n  setIsOpen,\r\n  content,\r\n  customButton,\r\n  close,\r\n  closeButtonStyle,\r\n}) => {\r\n  const closeModalHandler = () => {\r\n    setIsOpen(false);\r\n    if (close && close.func) {\r\n      close.func();\r\n    }\r\n  };\r\n  const customButtonHandler = () => {\r\n    if ( customButton && customButton.func) {\r\n      customButton.func();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ModalContainer>\r\n        {isOpen ? (\r\n          <ModalBackground onClick={closeModalHandler}>\r\n            <ModalView onClick={(e) => e.stopPropagation()}>\r\n              <div className=\"desc\">{content}</div>\r\n              {customButton && (\r\n                <ExitButton onClick={customButtonHandler}>\r\n                  {customButton && customButton.text}\r\n                </ExitButton>\r\n              )}\r\n              <ExitButton onClick={closeModalHandler} {...closeButtonStyle}>\r\n                {close && close.text}\r\n              </ExitButton>\r\n            </ModalView>\r\n          </ModalBackground>\r\n        ) : null}\r\n      </ModalContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoneBtnModalComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}